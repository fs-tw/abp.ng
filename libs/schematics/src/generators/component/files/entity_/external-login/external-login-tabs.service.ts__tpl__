import { Injectable, Injector, computed, effect, signal } from '@angular/core';
import { ABP, AbstractNavTreeService } from '@abp/ng.core';
import { Subject } from 'rxjs';
import { takeUntilDestroyed } from '@angular/core/rxjs-interop';

export interface ExternalLoginTabsState {
    selectedTab: ABP.Tab | null;
}

@Injectable({ providedIn: 'root' })
export class ExternalLoginTabsService extends AbstractNavTreeService<ABP.Tab> {
    private state = signal<ExternalLoginTabsState>({ selectedTab: null });

    selectedTab = computed(() => this.state().selectedTab);

    selected$ = new Subject<ABP.Tab | null>();

    constructor(injector: Injector) {
        super(injector);

        this.selected$
            .pipe(takeUntilDestroyed())
            .subscribe((tab) => {
                this.state.update((state) => ({
                    ...state,
                    selectedTab: tab
                }));
            });

        this.visible$
            .pipe(takeUntilDestroyed())
            .subscribe((tabs) => {
                if (this.selectedTab() === null && tabs.length > 0) {
                    this.selected$.next(tabs[0]);
                }
            });

        effect(() => {
            // console.log('state changed:', this.state());
        });
    }
}
