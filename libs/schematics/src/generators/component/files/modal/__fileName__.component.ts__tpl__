import {
  ChangeDetectionStrategy,
  Component,
  EventEmitter,
  Output,
  effect,
  input,
  output,
} from '@angular/core';
import { CoreModule, SubscriptionService } from '@abp/ng.core';
import {
  UntypedFormBuilder,
  UntypedFormGroup,
  Validators,
} from '@angular/forms';
import { ThemeSharedModule } from '@abp/ng.theme.shared';
import { NgbNavModule } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: '<%= selector %>',
  templateUrl: './<%= names.fileName %>.component.html',
  providers: [SubscriptionService],
  changeDetection: ChangeDetectionStrategy.OnPush,
  standalone: true,
  imports: [CoreModule, ThemeSharedModule, NgbNavModule],
})
export class <%= names.className %>Component {
  visible = input(false);
  visibleChange = output<boolean>();

  @Output()
  saved = new EventEmitter<boolean>();

  modalBusy = false;

  form!: UntypedFormGroup;

  constructor(
    private fb: UntypedFormBuilder
  ) {
    effect(() => {
      if (this.visible())
        this.initModal();
    });    
  }

  initModal() {
    this.buildForm();

  }

  save() {
    if (this.modalBusy) return;

    this.modalBusy = true;

    this.saved.emit(true);
  }

  private buildForm() {
    this.form = this.fb.group({
      claimType: ['', [Validators.required]],
      claimValue: ['', [Validators.required]],
    });
  }
}
