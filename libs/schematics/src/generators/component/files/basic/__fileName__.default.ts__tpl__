import { escapeHtmlChars, LocalizationService } from '@abp/ng.core';
import {
  EntityProp,
  ePropType,
  ExtensionsService,
  FormProp,
  mergeWithDefaultActions,
  mergeWithDefaultProps,
  EntityAction,
  ToolbarAction
} from '@abp/ng.components/extensible';
import { IdentityRoleDto } from '@volo/abp.ng.identity/proxy';
import { of } from 'rxjs';
import { SHOW_ENTITY_HISTORY } from '@volo/abp.commercial.ng.ui';
import { <%= className %>Component } from './<%= fileName %>.component';
import { e<%= className %>Names } from './<%= fileName %>.model';
import { Validators } from '@angular/forms';

export const ENTITY_ACTIONS = EntityAction.createMany<IdentityRoleDto>([
  {
    text: 'AbpIdentity::Edit',
    action: data => {
      const component = data.getInjected(<%= className %>Component);
      component.onEdit(data.record.id!);
    },
    permission: 'AbpIdentity.Roles.Update',
  },
  {
    text: 'AbpIdentity::Claims',
    action: data => {
      const component = data.getInjected(<%= className %>Component);
      //component.onManageClaims(data.record.id);
    },
    permission: 'AbpIdentity.Roles.Update',
  },
  {
    text: 'AbpIdentity::Permissions',
    action: data => {
      const component = data.getInjected(<%= className %>Component);
      //component.openPermissionsModal(data.record.name!);
    },
    permission: 'AbpIdentity.Roles.ManagePermissions',
  },
  {
    text: 'AbpIdentity::ChangeHistory',
    action: data => {
      const showHistory = data.getInjected(SHOW_ENTITY_HISTORY);
      //showHistory(data.record.id, 'Volo.Abp.Identity.IdentityRole');
    },
    permission: 'AuditLogging.ViewChangeHistory:Volo.Abp.Identity.IdentityRole',
    // visible: data => Boolean(data.getInjected(SHOW_ENTITY_HISTORY, null)),
  },
  {
    text: 'AbpIdentity::Delete',
    action: data => {
      const component = data.getInjected(<%= className %>Component);
      //  component.delete(data.record.id, data.record.name);
    },
    permission: 'AbpIdentity.Roles.Delete',
    //visible: data => !data?.record.isStatic,
  },
]);

export const TOOLBAR_ACTIONS = ToolbarAction.createMany<IdentityRoleDto[]>([
  {
    text: 'AbpIdentity::NewRole',
    action: data => {
      const component = data.getInjected(<%= className %>Component);
      component.onAdd();
    },
    permission: 'AbpIdentity.Roles.Create',
    icon: 'fa fa-plus',
  },
]);

export const ENTITY_PROPS = EntityProp.createMany<IdentityRoleDto>([
  {
    type: ePropType.String,
    name: 'name',
    displayName: 'AbpIdentity::RoleName',
    sortable: true,
    valueResolver: (data: any) => {
      const l10n = data.getInjected(LocalizationService);
      const t = l10n.instant.bind(l10n);
      const { isDefault, isPublic, name } = data.record;

      return of(
        escapeHtmlChars(name) +
        (isDefault
          ? `<span class="badge rounded-pill bg-success ms-1">${t(
            'AbpIdentity::DisplayName:IsDefault',
          )}</span>`
          : '') +
        (isPublic
          ? `<span class="badge rounded-pill bg-info ms-1">${t(
            'AbpIdentity::DisplayName:IsPublic',
          )}</span>`
          : ''),
      );
    },
  },
]);

export const CREATE_FORM_PROPS = FormProp.createMany<IdentityRoleDto>([
  {
    type: ePropType.String,
    name: 'name',
    displayName: 'AbpIdentity::RoleName',
    id: 'role-name',
    //disabled: (data: PropData<IdentityRoleDto>) => data.record && data.record.isStatic,
    validators: () => [Validators.required],
  },
  {
    type: ePropType.Boolean,
    name: 'isDefault',
    displayName: 'AbpIdentity::DisplayName:IsDefault',
    id: 'role-is-default',
    defaultValue: false,
  },
  {
    type: ePropType.Boolean,
    name: 'isPublic',
    displayName: 'AbpIdentity::DisplayName:IsPublic',
    id: 'role-is-public',
    defaultValue: false,
  },
]);
export const EDIT_FORM_PROPS = CREATE_FORM_PROPS;

export function MergeDefaults<%= className %>(extensions: ExtensionsService) {
  mergeWithDefaultActions(
    extensions.entityActions,
    {
      [e<%= className %>Names.<%= className %>]: ENTITY_ACTIONS,
    }
  );
  mergeWithDefaultActions(
    extensions.toolbarActions,
    {
      [e<%= className %>Names.<%= className %>]: TOOLBAR_ACTIONS,
    }
  );
  mergeWithDefaultProps(
    extensions.entityProps,
    {
      [e<%= className %>Names.<%= className %>]: ENTITY_PROPS,
    },
  );
  mergeWithDefaultProps(
    extensions.createFormProps,
    { [e<%= className %>Names.<%= className %>]: CREATE_FORM_PROPS }
  );
  mergeWithDefaultProps(
    extensions.editFormProps,
    { [e<%= className %>Names.<%= className %>]: EDIT_FORM_PROPS },

  );
}