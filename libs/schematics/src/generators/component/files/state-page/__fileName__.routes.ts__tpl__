import { Routes } from '@angular/router';
import { <%= className %>Component } from './<%= fileName %>.component';
import { provide<%= className %> } from './<%= fileName %>.provide';
import { inject } from '@angular/core';
import { ExtensionsService } from '@abp/ng.theme.shared/extensions';
import { InitialRoles } from './<%= fileName %>.default';
import { <%= className %>TabsService } from './<%= fileName %>-tabs.service';
import { eSetPasswordNames, eSetPasswordPolicyNames } from './set-password/set-password.model';
import { SetPasswordComponent } from './set-password/set-password.component';
import { provideSetPassword } from './set-password/set-password.provide';
import { provideLock } from './lock/lock.provide';
import { eLockNames, eLockPolicyNames } from './lock/lock.model';
import { LockComponent } from './lock/lock.component';
import { provideTwoFactor } from './two-factor/two-factor.provide';
import { eTwoFactorNames, eTwoFactorPolicyNames } from './two-factor/two-factor.model';
import { TwoFactorComponent } from './two-factor/two-factor.component';
import { <%= className %>StateService } from './<%= fileName %>-state.service';

export const routes: Routes = [
  {
    path: '',
    component: <%= className %>Component,
    providers: [provide<%= className %>(), provideSetPassword(), provideLock(), provideTwoFactor()],
    resolve: {
      tabs: () => {
        const stateService = inject(<%= className %>StateService);
        const tabsService = inject(<%= className %>TabsService);
        tabsService.add([
          {
            name: eSetPasswordNames.SetPassword,
            order: 1,
            requiredPolicy: eSetPasswordPolicyNames.SetPassword,
            component: SetPasswordComponent,
          },
          {
            name: eLockNames.Lock,
            order: 1,
            requiredPolicy: eLockPolicyNames.Lock,
            component: LockComponent
          },
          {
            name: eTwoFactorNames.TwoFactor,
            order: 1,
            requiredPolicy: eTwoFactorPolicyNames.TwoFactor,
            component: TwoFactorComponent,
          }
        ]);
        return tabsService.tree;
      },
      extensions: () => {
        const extensions = inject(ExtensionsService);

        InitialRoles(extensions);

        return extensions;
      }
    },
  },
];
