import { NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';
import { collapse, ThemeSharedModule, ToasterService } from '@abp/ng.theme.shared';
import { Component, OnInit } from '@angular/core';
import { UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';
import { finalize } from 'rxjs/operators';
import { <%= className %>Service } from './<%= fileName %>.service';
import { e<%= className %>PolicyNames, EmailSettingsDto } from './<%= fileName %>.model';
import { PageModule } from '@abp/ng.components/page';
import { CoreModule } from '@abp/ng.core';

@Component({
  selector: '<%= selector %>',
  templateUrl: '<%= fileName %><%= type ? '.' + type : '' %>.html',
  animations: [collapse],
  standalone:true,
  imports:[
    CoreModule, ThemeSharedModule, PageModule
  ]
})
export class <%= className %><%= typeClassName %> implements OnInit {
  form!: UntypedFormGroup;
  emailTestForm!: UntypedFormGroup;
  saving = false;
  emailingPolicy = e<%= className %>PolicyNames.<%= className %>;
  isEmailTestModalOpen = false;
  modalSize:NgbModalOptions= { size:"lg"} 

  constructor(
    private <%= propertyName %>Service: <%= className %>Service,
    private fb: UntypedFormBuilder,
    private toasterService: ToasterService,
  ) {}

  ngOnInit() {
    this.getData();
  }

  private getData() {
    this.<%= propertyName %>Service.get().subscribe(res => {
      this.buildForm(res);
    });
  }

  private buildForm(emailSettings: EmailSettingsDto) {
    this.form = this.fb.group({
      defaultFromDisplayName: [emailSettings.defaultFromDisplayName, [Validators.required]],
      defaultFromAddress: [emailSettings.defaultFromAddress, [Validators.required]],
      smtpHost: [emailSettings.smtpHost],
      smtpPort: [emailSettings.smtpPort, [Validators.required]],
      smtpEnableSsl: [emailSettings.smtpEnableSsl],
      smtpUseDefaultCredentials: [emailSettings.smtpUseDefaultCredentials],
      smtpDomain: [emailSettings.smtpDomain],
      smtpUserName: [emailSettings.smtpUserName],
      smtpPassword: [emailSettings.smtpPassword],
    });
  }

  submit() {
    if (this.saving || this.form.invalid) return;

    this.saving = true;
    this.<%= propertyName %>Service
      .update(this.form.value)
      .pipe(finalize(() => (this.saving = false)))
      .subscribe(() => {
        this.toasterService.success('<%= featureNames.className %>::SuccessfullySaved');
        this.getData();
      });
  }
  openSendEmailModal() {
    this.buildEmailTestForm();
    this.isEmailTestModalOpen = true;
  }

  buildEmailTestForm() {
    this.emailTestForm = this.fb.group({
      senderEmailAddress: ['', [Validators.required, Validators.email]],
      targetEmailAddress: ['', [Validators.required, Validators.email]],
      subject: ['', [Validators.required]],
      body: [''],
    });
  }

  emailTestFormSubmit() {

    if(this.emailTestForm.invalid){
      return;
    }
     this.<%= propertyName %>Service.sendTestEmail(this.emailTestForm.value).subscribe(res => {
      this.toasterService.success('<%= featureNames.className %>::SuccessfullySent');
      this.isEmailTestModalOpen = false;
    })
      
  }

}
