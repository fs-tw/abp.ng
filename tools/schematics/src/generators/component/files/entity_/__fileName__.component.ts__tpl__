import { CoreModule, ListService } from '@abp/ng.core';
import {
  Confirmation,
  ConfirmationService,
  ThemeSharedModule,
  ToasterService,
} from '@abp/ng.theme.shared';
import { EXTENSIONS_IDENTIFIER } from '@abp/ng.components/extensible';
import { Component, TrackByFunction, inject } from '@angular/core';
import { AbstractControl } from '@angular/forms';
import { IdentityUserService } from '@volo/abp.ng.identity/proxy';
import { e<%= className %>Names } from './<%= fileName %>.model';
import { PageModule } from '@abp/ng.components/page';
import {
  CommercialUiModule,
} from '@volo/abp.commercial.ng.ui';
import { <%= className %>ListComponent } from './<%= fileName %>-list/<%= fileName %>-list.component';
import { <%= className %>ModalComponent } from './<%= fileName %>-modal/<%= fileName %>-modal.component';
import { <%= className %>DetailsComponent } from './<%= fileName %>-details/<%= fileName %>-details.component';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';

@Component({
  selector: 'app-<%= fileName %>',
  templateUrl: './<%= fileName %>.component.html',
  providers: [
    ListService,
    {
      provide: EXTENSIONS_IDENTIFIER,
      useValue: e<%= className %>Names.<%= className %>,
    },
  ],
  standalone: true,
  imports: [
    RouterModule,
    CoreModule,
    ThemeSharedModule,
    CommercialUiModule,
    PageModule,
    <%= className %>ModalComponent,

    <%= className %>ListComponent,
    <%= className %>DetailsComponent
  ],
})
export class <%= className %>Component {
  listComponent?: <%= className %>ListComponent;

  confirmationService = inject(ConfirmationService);

  service = inject(IdentityUserService);

  toasterService = inject(ToasterService);

  router = inject(Router);

  activatedRoute = inject(ActivatedRoute);

  trackByFn: TrackByFunction<AbstractControl> = (index, item) =>
    Object.keys(item)[0] || index;  

  <%= propertyName %>Modal = {
    visible: false,
    id: null
  } as { visible: boolean; id?: string | null }

  onActive($event: object) {
    if ($event instanceof <%= className %>ListComponent)
      this.listComponent = $event;
  }  

  navigate(commands: unknown[]) {
    this.router.navigate(commands,{ relativeTo: this.activatedRoute });
  }

  loadDatas(){
    this.listComponent?.list.get();
  }

  onAdd() {
    this.<%= propertyName %>Modal.id = null;
    this.<%= propertyName %>Modal.visible = true;
  }

  onEdit(id: string) {
    this.<%= propertyName %>Modal.id = id;
    this.<%= propertyName %>Modal.visible = true;
  }

  delete(id: string, userName: string) {
    this.confirmationService
      .warn(
        'AbpIdentity::UserDeletionConfirmationMessage',
        'AbpIdentity::AreYouSure',
        {
          messageLocalizationParams: [userName],
        }
      )
      .subscribe((status: Confirmation.Status) => {
        if (status === Confirmation.Status.confirm) {
          this.service.delete(id).subscribe(() => this.loadDatas());
        }
      });
  }

  unlock(id: string) {
    this.service.unlock(id).subscribe(() => {
      this.toasterService.success('AbpIdentity::UserUnlocked');
      this.loadDatas();
    });
  }
}
