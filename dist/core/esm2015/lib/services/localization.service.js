import { __awaiter } from "tslib";
import { Injectable, Injector, NgZone, Optional, SkipSelf } from '@angular/core';
import { Router } from '@angular/router';
import { Actions, ofActionSuccessful, Store } from '@ngxs/store';
import { noop } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { SetLanguage } from '../actions/session.actions';
import { ConfigState } from '../states/config.state';
import { registerLocale } from '../utils/initial-utils';
import { createLocalizer, createLocalizerWithFallback } from '../utils/localization-utils';
import { CORE_OPTIONS } from '../tokens/options.token';
import * as i0 from "@angular/core";
import * as i1 from "@ngxs/store";
export class LocalizationService {
    constructor(actions, store, injector, ngZone, otherInstance) {
        this.actions = actions;
        this.store = store;
        this.injector = injector;
        this.ngZone = ngZone;
        if (otherInstance)
            throw new Error('LocalizationService should have only one instance.');
        this.listenToSetLanguage();
    }
    /**
     * Returns currently selected language
     */
    get currentLang() {
        return this.store.selectSnapshot(state => state.SessionState.language);
    }
    get languageChange() {
        return this.actions.pipe(ofActionSuccessful(SetLanguage), filter((action) => action.dispatchAppConfiguration !== false));
    }
    listenToSetLanguage() {
        this.languageChange.subscribe(({ payload }) => this.registerLocale(payload));
    }
    registerLocale(locale) {
        const router = this.injector.get(Router);
        const { cultureNameLocaleFileMap } = this.injector.get(CORE_OPTIONS);
        const { shouldReuseRoute } = router.routeReuseStrategy;
        router.routeReuseStrategy.shouldReuseRoute = () => false;
        router.navigated = false;
        return registerLocale(locale, cultureNameLocaleFileMap).then(() => {
            this.ngZone.run(() => __awaiter(this, void 0, void 0, function* () {
                yield router.navigateByUrl(router.url).catch(noop);
                router.routeReuseStrategy.shouldReuseRoute = shouldReuseRoute;
            }));
        });
    }
    /**
     * Returns an observable localized text with the given interpolation parameters in current language.
     * @param key Localizaton key to replace with localized text
     * @param interpolateParams Values to interpolate
     */
    get(key, ...interpolateParams) {
        return this.store.select(ConfigState.getLocalization(key, ...interpolateParams));
    }
    getResource(resourceName) {
        return this.store.select(ConfigState.getLocalizationResource(resourceName));
    }
    /**
     * Returns localized text with the given interpolation parameters in current language.
     * @param key Localization key to replace with localized text
     * @param interpolateParams Values to intepolate.
     */
    instant(key, ...interpolateParams) {
        return this.store.selectSnapshot(ConfigState.getLocalization(key, ...interpolateParams));
    }
    localize(resourceName, key, defaultValue) {
        return this.store.select(ConfigState.getOne('localization')).pipe(map(createLocalizer), map(localize => localize(resourceName, key, defaultValue)));
    }
    localizeSync(resourceName, key, defaultValue) {
        const localization = this.store.selectSnapshot(ConfigState.getOne('localization'));
        return createLocalizer(localization)(resourceName, key, defaultValue);
    }
    localizeWithFallback(resourceNames, keys, defaultValue) {
        return this.store.select(ConfigState.getOne('localization')).pipe(map(createLocalizerWithFallback), map(localizeWithFallback => localizeWithFallback(resourceNames, keys, defaultValue)));
    }
    localizeWithFallbackSync(resourceNames, keys, defaultValue) {
        const localization = this.store.selectSnapshot(ConfigState.getOne('localization'));
        return createLocalizerWithFallback(localization)(resourceNames, keys, defaultValue);
    }
}
LocalizationService.ɵprov = i0.ɵɵdefineInjectable({ factory: function LocalizationService_Factory() { return new LocalizationService(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i1.Store), i0.ɵɵinject(i0.INJECTOR), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(LocalizationService, 12)); }, token: LocalizationService, providedIn: "root" });
LocalizationService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
LocalizationService.ctorParameters = () => [
    { type: Actions },
    { type: Store },
    { type: Injector },
    { type: NgZone },
    { type: LocalizationService, decorators: [{ type: Optional }, { type: SkipSelf }] }
];
//# sourceMappingURL=data:application/json;base64,