!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@abp/ng.core"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("@angular/router"),require("@angular/forms"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/animations")):"function"==typeof define&&define.amd?define("@abp/ng.account",["exports","@abp/ng.core","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","@angular/router","@angular/forms","@ngxs/store","angular-oauth2-oidc","rxjs","rxjs/operators","snq","@angular/animations"],e):e(((n="undefined"!=typeof globalThis?globalThis:n||self).abp=n.abp||{},n.abp.ng=n.abp.ng||{},n.abp.ng.account={}),n.i1,n.ng_theme_shared,n.ng.core,n.ngBootstrap,n.core,n.ng.router,n.ng.forms,n.store,n.angularOauth2Oidc,n.rxjs,n.rxjs.operators,n.snq,n.ng.animations)}(this,(function(n,e,r,t,a,o,i,s,l,c,p,u,d,m){"use strict";function b(n){return n&&"object"==typeof n&&"default"in n?n:{default:n}}var f=b(d);
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function g(n,e,r,t){var a,o=arguments.length,i=o<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,r):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,r,t);else for(var s=n.length-1;s>=0;s--)(a=n[s])&&(i=(o<3?a(i):o>3?a(e,r,i):a(e,r))||i);return o>3&&i&&Object.defineProperty(e,r,i),i}function h(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)}function v(n,e){var r="function"==typeof Symbol&&n[Symbol.iterator];if(!r)return n;var t,a,o=r.call(n),i=[];try{for(;(void 0===e||e-- >0)&&!(t=o.next()).done;)i.push(t.value)}catch(n){a={error:n}}finally{try{t&&!t.done&&(r=o.return)&&r.call(o)}finally{if(a)throw a.error}}return i}function y(){for(var n=[],e=0;e<arguments.length;e++)n=n.concat(v(arguments[e]));return n}var w=s.Validators.maxLength,S=(s.Validators.minLength,s.Validators.required);n.ɵb=function(){function n(n,e,r,t,a){this.fb=n,this.oauthService=e,this.store=r,this.toasterService=t,this.authService=a,this.isSelfRegistrationEnabled=!0,this.authWrapperKey="Account.AuthWrapperComponent"}return n.prototype.ngOnInit=function(){this.isSelfRegistrationEnabled="false"!==(this.store.selectSnapshot(e.ConfigState.getSetting("Abp.Account.IsSelfRegistrationEnabled"))||"").toLowerCase(),this.form=this.fb.group({username:["",[S,w(255)]],password:["",[S,w(128)]],remember:[!1]})},n.prototype.onSubmit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.authService.login(this.form.get("username").value,this.form.get("password").value).pipe(u.catchError((function(e){return n.toasterService.error(f.default((function(){return e.error.error_description}))||f.default((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),p.throwError(e)})),u.finalize((function(){return n.inProgress=!1}))).subscribe((function(){n.store.dispatch(new e.SetRemember(n.form.get("remember").value))})))},n}(),n.ɵb=g([t.Component({selector:"abp-login",template:'<abp-auth-wrapper\r\n  *abpReplaceableTemplate="{\r\n    componentKey: authWrapperKey,\r\n    inputs: {\r\n      mainContentRef: { value: mainContentRef },\r\n      cancelContentRef: { value: cancelContentRef }\r\n    }\r\n  }"\r\n  [mainContentRef]="mainContentRef"\r\n  [cancelContentRef]="cancelContentRef"\r\n>\r\n</abp-auth-wrapper>\r\n<ng-template #mainContentRef>\r\n  <h4>{{ \'AbpAccount::Login\' | abpLocalization }}</h4>\r\n  <strong *ngIf="isSelfRegistrationEnabled">\r\n    {{ \'AbpAccount::AreYouANewUser\' | abpLocalization }}\r\n    <a class="text-decoration-none" routerLink="/account/register">{{\r\n      \'AbpAccount::Register\' | abpLocalization\r\n    }}</a>\r\n  </strong>\r\n  <form [formGroup]="form" (ngSubmit)="onSubmit()" validateOnSubmit class="mt-4">\r\n    <div class="form-group">\r\n      <label for="login-input-user-name-or-email-address">{{\r\n        \'AbpAccount::UserNameOrEmailAddress\' | abpLocalization\r\n      }}</label>\r\n      <input\r\n        class="form-control"\r\n        type="text"\r\n        id="login-input-user-name-or-email-address"\r\n        formControlName="username"\r\n        autocomplete="username"\r\n        autofocus\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="login-input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label>\r\n      <input\r\n        class="form-control"\r\n        type="password"\r\n        id="login-input-password"\r\n        formControlName="password"\r\n        autocomplete="current-password"\r\n      />\r\n    </div>\r\n    <div class="form-check" validationTarget validationStyle>\r\n      <label class="form-check-label" for="login-input-remember-me">\r\n        <input\r\n          class="form-check-input"\r\n          type="checkbox"\r\n          id="login-input-remember-me"\r\n          formControlName="remember"\r\n        />\r\n        {{ \'AbpAccount::RememberMe\' | abpLocalization }}\r\n      </label>\r\n    </div>\r\n    <abp-button\r\n      [loading]="inProgress"\r\n      buttonType="submit"\r\n      name="Action"\r\n      buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n    >\r\n      {{ \'AbpAccount::Login\' | abpLocalization }}\r\n    </abp-button>\r\n  </form>\r\n</ng-template>\r\n<ng-template #cancelContentRef>\r\n  <div class="card-footer text-center border-0">\r\n    <a routerLink="/">\r\n      <button type="button" name="Action" value="Cancel" class="px-2 py-0 btn btn-link">\r\n        {{ \'AbpAccount::Cancel\' | abpLocalization }}\r\n      </button>\r\n    </a>\r\n  </div>\r\n</ng-template>\r\n'}),h("design:paramtypes",[s.FormBuilder,c.OAuthService,l.Store,r.ToasterService,e.AuthService])],n.ɵb),n.ɵg=function(){function n(n){this.store=n,this.selectedTab=0,this.changePasswordKey="Account.ChangePasswordComponent",this.personalSettingsKey="Account.PersonalSettingsComponent"}return n.prototype.ngOnInit=function(){var n=this;this.store.dispatch(new e.GetProfile).subscribe((function(){n.isProfileLoaded=!0,n.store.selectSnapshot(e.ProfileState.getProfile).isExternal&&(n.hideChangePasswordTab=!0,n.selectedTab=1)}))},n}(),n.ɵg=g([t.Component({selector:"abp-manage-profile",template:'<div id="AbpContentToolbar"></div>\r\n\r\n<div class="card border-0 shadow-sm min-h-400" [abpLoading]="!isProfileLoaded">\r\n  <div class="card-body">\r\n    <div class="row">\r\n      <div class="col-12 col-md-3">\r\n        <ul class="nav flex-column nav-pills" id="nav-tab" role="tablist">\r\n          <li\r\n            *ngIf="!hideChangePasswordTab && isProfileLoaded"\r\n            class="nav-item"\r\n            (click)="selectedTab = 0"\r\n          >\r\n            <a\r\n              class="nav-link"\r\n              [ngClass]="{ active: selectedTab === 0 }"\r\n              role="tab"\r\n              href="javascript:void(0)"\r\n              >{{ \'AbpUi::ChangePassword\' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n          <li class="nav-item mb-2" (click)="selectedTab = 1">\r\n            <a\r\n              class="nav-link"\r\n              [ngClass]="{ active: selectedTab === 1 }"\r\n              role="tab"\r\n              href="javascript:void(0)"\r\n              >{{ \'AbpAccount::PersonalSettings\' | abpLocalization }}</a\r\n            >\r\n          </li>\r\n        </ul>\r\n      </div>\r\n      <div *ngIf="isProfileLoaded" class="col-12 col-md-9">\r\n        <div class="tab-content" *ngIf="selectedTab === 0" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::ChangePassword\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-change-password-form\r\n              *abpReplaceableTemplate="{ componentKey: changePasswordKey }"\r\n            ></abp-change-password-form>\r\n          </div>\r\n        </div>\r\n        <div class="tab-content" *ngIf="selectedTab === 1" [@fadeIn]>\r\n          <div class="tab-pane active" role="tabpanel">\r\n            <h4>\r\n              {{ \'AbpIdentity::PersonalSettings\' | abpLocalization }}\r\n              <hr />\r\n            </h4>\r\n            <abp-personal-settings-form\r\n              *abpReplaceableTemplate="{ componentKey: personalSettingsKey }"\r\n            ></abp-personal-settings-form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n',animations:[m.trigger("fadeIn",[m.transition(":enter",m.useAnimation(r.fadeIn))])],styles:["\n      .min-h-400 {\n        min-height: 400px;\n      }\n    "]}),h("design:paramtypes",[l.Store])],n.ɵg),n.ɵd=function(){function n(n){this.rest=n,this.apiName="AbpAccount"}return n.prototype.findTenant=function(n){var e={method:"GET",url:"/api/abp/multi-tenancy/tenants/by-name/"+n};return this.rest.request(e,{apiName:this.apiName})},n.prototype.register=function(n){var e={method:"POST",url:"/api/account/register",body:n};return this.rest.request(e,{skipHandleError:!0,apiName:this.apiName})},n}(),n.ɵd.ɵprov=t.ɵɵdefineInjectable({factory:function(){return new n.ɵd(t.ɵɵinject(e.RestService))},token:n.ɵd,providedIn:"root"}),n.ɵd=g([t.Injectable({providedIn:"root"}),h("design:paramtypes",[e.RestService])],n.ɵd);var A=s.Validators.maxLength,C=s.Validators.required,T=s.Validators.email;n.ɵc=function(){function n(n,e,r,t,a,o){this.fb=n,this.accountService=e,this.oauthService=r,this.store=t,this.toasterService=a,this.authService=o,this.isSelfRegistrationEnabled=!0,this.authWrapperKey="Account.AuthWrapperComponent"}return n.prototype.ngOnInit=function(){this.isSelfRegistrationEnabled="false"!==(this.store.selectSnapshot(e.ConfigState.getSetting("Abp.Account.IsSelfRegistrationEnabled"))||"").toLowerCase(),this.isSelfRegistrationEnabled?this.form=this.fb.group({username:["",[C,A(255)]],password:["",y([C],r.getPasswordValidators(this.store))],email:["",[C,T]]}):this.toasterService.warn({key:"AbpAccount::SelfRegistrationDisabledMessage",defaultValue:"Self registration is disabled."},null,{life:1e4})},n.prototype.onSubmit=function(){var n=this;if(!this.form.invalid){this.inProgress=!0;var e={userName:this.form.get("username").value,password:this.form.get("password").value,emailAddress:this.form.get("email").value,appName:"Angular"};this.accountService.register(e).pipe(u.switchMap((function(){return n.authService.login(e.userName,e.password)})),u.catchError((function(e){return n.toasterService.error(f.default((function(){return e.error.error_description}))||f.default((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"),"Error",{life:7e3}),p.throwError(e)})),u.finalize((function(){return n.inProgress=!1}))).subscribe()}},n}(),n.ɵc=g([t.Component({selector:"abp-register",template:'<abp-auth-wrapper\r\n  *abpReplaceableTemplate="{\r\n    componentKey: authWrapperKey,\r\n    inputs: {\r\n      mainContentRef: { value: mainContentRef }\r\n    }\r\n  }"\r\n  [mainContentRef]="mainContentRef"\r\n>\r\n</abp-auth-wrapper>\r\n<ng-template #mainContentRef>\r\n  <h4>{{ \'AbpAccount::Register\' | abpLocalization }}</h4>\r\n  <strong>\r\n    {{ \'AbpAccount::AlreadyRegistered\' | abpLocalization }}\r\n    <a class="text-decoration-none" routerLink="/account/login">{{\r\n      \'AbpAccount::Login\' | abpLocalization\r\n    }}</a>\r\n  </strong>\r\n  <form\r\n    *ngIf="isSelfRegistrationEnabled"\r\n    [formGroup]="form"\r\n    (ngSubmit)="onSubmit()"\r\n    validateOnSubmit\r\n    class="mt-4"\r\n  >\r\n    <div class="form-group">\r\n      <label for="input-user-name">{{ \'AbpAccount::UserName\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input\r\n        autofocus\r\n        type="text"\r\n        id="input-user-name"\r\n        class="form-control"\r\n        formControlName="username"\r\n        autocomplete="username"\r\n      />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="input-email-address">{{ \'AbpAccount::EmailAddress\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input type="email" id="input-email-address" class="form-control" formControlName="email" />\r\n    </div>\r\n    <div class="form-group">\r\n      <label for="input-password">{{ \'AbpAccount::Password\' | abpLocalization }}</label\r\n      ><span> * </span\r\n      ><input\r\n        type="password"\r\n        id="input-password"\r\n        class="form-control"\r\n        formControlName="password"\r\n        autocomplete="current-password"\r\n      />\r\n    </div>\r\n    <abp-button\r\n      [loading]="inProgress"\r\n      buttonType="submit"\r\n      name="Action"\r\n      buttonClass="btn-block btn-lg mt-3 btn btn-primary"\r\n    >\r\n      {{ \'AbpAccount::Register\' | abpLocalization }}\r\n    </abp-button>\r\n  </form>\r\n</ng-template>\r\n'}),h("design:paramtypes",[s.FormBuilder,n.ɵd,c.OAuthService,l.Store,r.ToasterService,e.AuthService])],n.ɵc),n.ɵj=function(){function n(n){this.authService=n}return n.prototype.canActivate=function(){return!!this.authService.isInternalAuth||(this.authService.initLogin(),!1)},n}(),n.ɵj=g([t.Injectable(),h("design:paramtypes",[e.AuthService])],n.ɵj);var L={replaceableComponent:{key:"Account.LoginComponent",defaultComponent:n.ɵb}},P={replaceableComponent:{key:"Account.RegisterComponent",defaultComponent:n.ɵc}},N={replaceableComponent:{key:"Account.ManageProfileComponent",defaultComponent:n.ɵg}},R=[{path:"",pathMatch:"full",redirectTo:"login"},{path:"",component:e.DynamicLayoutComponent,children:[{path:"login",component:e.ReplaceableRouteContainerComponent,canActivate:[n.ɵj],data:L},{path:"register",component:e.ReplaceableRouteContainerComponent,canActivate:[n.ɵj],data:P},{path:"manage-profile",component:e.ReplaceableRouteContainerComponent,canActivate:[e.AuthGuard],data:N}]}];n.ɵi=function(){},n.ɵi=g([t.NgModule({imports:[i.RouterModule.forChild(R)],exports:[i.RouterModule]})],n.ɵi),n.ɵa=function(){function n(n,e,r){this.multiTenancy=n,this.store=e,this.subscription=r,this.enableLocalLogin=!0,this.tenantBoxKey="Account.TenantBoxComponent"}return n.prototype.ngOnInit=function(){var n=this;this.subscription.addOne(this.store.select(e.ConfigState.getSetting("Abp.Account.EnableLocalLogin")),(function(e){e&&(n.enableLocalLogin="false"!==e.toLowerCase())}))},n}(),g([t.Input(),h("design:type",t.TemplateRef)],n.ɵa.prototype,"mainContentRef",void 0),g([t.Input(),h("design:type",t.TemplateRef)],n.ɵa.prototype,"cancelContentRef",void 0),g([l.Select(e.ConfigState.getDeep("multiTenancy.isEnabled")),h("design:type",p.Observable)],n.ɵa.prototype,"isMultiTenancyEnabled$",void 0),n.ɵa=g([t.Component({selector:"abp-auth-wrapper",template:'<div class="row">\r\n  <div class="mx-auto col col-md-5">\r\n    <ng-container *ngIf="(isMultiTenancyEnabled$ | async) && multiTenancy.isTenantBoxVisible">\r\n      <abp-tenant-box *abpReplaceableTemplate="{ componentKey: tenantBoxKey }"></abp-tenant-box>\r\n    </ng-container>\r\n\r\n    <div class="abp-account-container">\r\n      <div\r\n        *ngIf="enableLocalLogin; else disableLocalLoginTemplate"\r\n        class="card mt-3 shadow-sm rounded"\r\n      >\r\n        <div class="card-body p-5">\r\n          <ng-content *ngTemplateOutlet="mainContentRef"></ng-content>\r\n        </div>\r\n        <ng-content *ngTemplateOutlet="cancelContentRef"></ng-content>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ng-template #disableLocalLoginTemplate>\r\n  <div class="alert alert-warning">\r\n    <strong>{{ \'AbpAccount::InvalidLoginRequest\' | abpLocalization }}</strong>\r\n    {{ \'AbpAccount::ThereAreNoLoginSchemesConfiguredForThisClient\' | abpLocalization }}\r\n  </div>\r\n</ng-template>\r\n',exportAs:"abpAuthWrapper",providers:[e.SubscriptionService]}),h("design:paramtypes",[e.MultiTenancyService,l.Store,e.SubscriptionService])],n.ɵa);var x=s.Validators.required,I=["newPassword","repeatNewPassword"];n.ɵf=function(){function n(n,e,r){this.fb=n,this.store=e,this.toasterService=r,this.mapErrorsFn=function(n,e,r){return I.indexOf(String(r.name))<0?n:n.concat(e.filter((function(n){return"passwordMismatch"===n.key})))}}return n.prototype.ngOnInit=function(){this.hideCurrentPassword=!this.store.selectSnapshot(e.ProfileState.getProfile).hasPassword;var n=r.getPasswordValidators(this.store);this.form=this.fb.group({password:["",x],newPassword:["",{validators:y([x],n)}],repeatNewPassword:["",{validators:y([x],n)}]},{validators:[o.comparePasswords(I)]}),this.hideCurrentPassword&&this.form.removeControl("password")},n.prototype.onSubmit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.ChangePassword(Object.assign(Object.assign({},!this.hideCurrentPassword&&{currentPassword:this.form.get("password").value}),{newPassword:this.form.get("newPassword").value}))).pipe(u.finalize((function(){return n.inProgress=!1}))).subscribe({next:function(){n.form.reset(),n.toasterService.success("AbpAccount::PasswordChangedMessage","",{life:5e3}),n.hideCurrentPassword&&(n.hideCurrentPassword=!1,n.form.addControl("password",new s.FormControl("",[x])))},error:function(e){n.toasterService.error(f.default((function(){return e.error.error.message}),"AbpAccount::DefaultErrorMessage"))}}))},n}(),n.ɵf=g([t.Component({selector:"abp-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn" validateOnSubmit>\r\n  <div *ngIf="!hideCurrentPassword" class="form-group">\r\n    <label for="current-password">{{\r\n      \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="current-password"\r\n      class="form-control"\r\n      formControlName="password"\r\n      autofocus\r\n      autocomplete="current-password"\r\n    />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="new-password"\r\n      class="form-control"\r\n      formControlName="newPassword"\r\n      autocomplete="new-password"\r\n    />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="confirm-new-password">{{\r\n      \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization\r\n    }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="password"\r\n      id="confirm-new-password"\r\n      class="form-control"\r\n      formControlName="repeatNewPassword"\r\n      autocomplete="new-password"\r\n    />\r\n  </div>\r\n  <abp-button\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    buttonType="submit"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid"\r\n    >{{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n',exportAs:"abpChangePasswordForm"}),h("design:paramtypes",[s.FormBuilder,l.Store,r.ToasterService])],n.ɵf);var z=s.Validators.maxLength,M=s.Validators.required,O=s.Validators.email;n.ɵh=function(){function n(n,e,r){this.fb=n,this.store=e,this.toasterService=r}return n.prototype.ngOnInit=function(){this.buildForm()},n.prototype.buildForm=function(){var n=this.store.selectSnapshot(e.ProfileState.getProfile);this.form=this.fb.group({userName:[n.userName,[M,z(256)]],email:[n.email,[M,O,z(256)]],name:[n.name||"",[z(64)]],surname:[n.surname||"",[z(64)]],phoneNumber:[n.phoneNumber||"",[z(16)]]})},n.prototype.submit=function(){var n=this;this.form.invalid||(this.inProgress=!0,this.store.dispatch(new e.UpdateProfile(this.form.value)).pipe(u.finalize((function(){return n.inProgress=!1}))).subscribe((function(){n.toasterService.success("AbpAccount::PersonalSettingsSaved","Success",{life:5e3})})))},n}(),n.ɵh=g([t.Component({selector:"abp-personal-settings-form",template:'<form validateOnSubmit *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\r\n  <div class="form-group">\r\n    <label for="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input\r\n      type="text"\r\n      id="username"\r\n      class="form-control"\r\n      formControlName="userName"\r\n      autofocus\r\n      (keydown.space)="$event.preventDefault()"\r\n    />\r\n  </div>\r\n  <div class="row">\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label\r\n        ><input type="text" id="name" class="form-control" formControlName="name" />\r\n      </div>\r\n    </div>\r\n    <div class="col col-md-6">\r\n      <div class="form-group">\r\n        <label for="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</label\r\n        ><input type="text" id="surname" class="form-control" formControlName="surname" />\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</label\r\n    ><span> * </span\r\n    ><input type="text" id="email-address" class="form-control" formControlName="email" />\r\n  </div>\r\n  <div class="form-group">\r\n    <label for="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</label\r\n    ><input type="text" id="phone-number" class="form-control" formControlName="phoneNumber" />\r\n  </div>\r\n  <abp-button\r\n    buttonType="submit"\r\n    iconClass="fa fa-check"\r\n    buttonClass="btn btn-primary color-white"\r\n    [loading]="inProgress"\r\n    [disabled]="form?.invalid"\r\n  >\r\n    {{ \'AbpIdentity::Save\' | abpLocalization }}</abp-button\r\n  >\r\n</form>\r\n',exportAs:"abpPersonalSettingsForm"}),h("design:paramtypes",[s.FormBuilder,l.Store,r.ToasterService])],n.ɵh),n.ɵe=function(){function n(n,e,r){this.store=n,this.toasterService=e,this.accountService=r}return n.prototype.onSwitch=function(){var n=this.store.selectSnapshot(e.SessionState.getTenant);this.name=(n||{}).name,this.isModalVisible=!0},n.prototype.save=function(){var n=this;if(!this.name)return this.setTenant(null),void(this.isModalVisible=!1);this.modalBusy=!0,this.accountService.findTenant(this.name).pipe(u.finalize((function(){return n.modalBusy=!1}))).subscribe((function(e){var r=e.success,t=e.tenantId,a=e.name;r?(n.setTenant({id:t,name:a}),n.isModalVisible=!1):n.showError()}))},n.prototype.setTenant=function(n){return this.store.dispatch([new e.SetTenant(n),new e.GetAppConfiguration])},n.prototype.showError=function(){this.toasterService.error("AbpUiMultiTenancy::GivenTenantIsNotAvailable","AbpUi::Error",{messageLocalizationParams:[this.name]})},n}(),g([l.Select(e.SessionState.getTenant),h("design:type",p.Observable)],n.ɵe.prototype,"currentTenant$",void 0),n.ɵe=g([t.Component({selector:"abp-tenant-box",template:'<ng-container *ngIf="(currentTenant$ | async) || {} as currentTenant">\r\n  <div class="card shadow-sm rounded mb-3">\r\n    <div class="card-body px-5">\r\n      <div class="row">\r\n        <div class="col">\r\n          <span style="font-size: 0.8em;" class="text-uppercase text-muted">{{\r\n            \'AbpUiMultiTenancy::Tenant\' | abpLocalization\r\n          }}</span\r\n          ><br />\r\n          <h6 class="m-0 d-inline-block">\r\n            <i>{{ currentTenant.name || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }}</i>\r\n          </h6>\r\n        </div>\r\n        <div class="col-auto">\r\n          <a\r\n            id="AbpTenantSwitchLink"\r\n            href="javascript:void(0);"\r\n            class="btn btn-sm mt-3 btn-outline-primary"\r\n            (click)="onSwitch()"\r\n            >{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a\r\n          >\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n    <ng-template #abpHeader>\r\n      <h5>Switch Tenant</h5>\r\n    </ng-template>\r\n    <ng-template #abpBody>\r\n      <form (ngSubmit)="save()">\r\n        <div class="mt-2">\r\n          <div class="form-group">\r\n            <label for="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}</label>\r\n            <input\r\n              [(ngModel)]="name"\r\n              type="text"\r\n              id="name"\r\n              name="tenant"\r\n              class="form-control"\r\n              autofocus\r\n            />\r\n          </div>\r\n          <p>{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}</p>\r\n        </div>\r\n      </form>\r\n    </ng-template>\r\n    <ng-template #abpFooter>\r\n      <button #abpClose type="button" class="btn btn-secondary">\r\n        {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n      </button>\r\n      <abp-button\r\n        type="abp-button"\r\n        iconClass="fa fa-check"\r\n        (click)="save()"\r\n        [disabled]="currentTenant?.name === name"\r\n      >\r\n        <span>{{ \'AbpTenantManagement::Save\' | abpLocalization }}</span>\r\n      </abp-button>\r\n    </ng-template>\r\n  </abp-modal>\r\n</ng-container>\r\n'}),h("design:paramtypes",[l.Store,r.ToasterService,n.ɵd])],n.ɵe);var E,j=new t.InjectionToken("ACCOUNT_OPTIONS");function k(n){return Object.assign({redirectUrl:"/"},n)}n.AccountModule=E=function(){function r(){}return r.forChild=function(e){return{ngModule:E,providers:[n.ɵj,{provide:j,useValue:e},{provide:"ACCOUNT_OPTIONS",useFactory:k,deps:[j]}]}},r.forLazy=function(n){return new e.LazyModuleFactory(E.forChild(n))},r}(),n.AccountModule=E=g([t.NgModule({declarations:[n.ɵa,n.ɵb,n.ɵc,n.ɵe,n.ɵf,n.ɵg,n.ɵh],imports:[e.CoreModule,n.ɵi,r.ThemeSharedModule,a.NgbDropdownModule,o.NgxValidateCoreModule],exports:[]})],n.AccountModule),n.ACCOUNT_OPTIONS=j,n.AccountService=n.ɵd,n.AuthenticationFlowGuard=n.ɵj,n.ChangePasswordComponent=n.ɵf,n.LoginComponent=n.ɵb,n.ManageProfileComponent=n.ɵg,n.PersonalSettingsComponent=n.ɵh,n.RegisterComponent=n.ɵc,n.TenantBoxComponent=n.ɵe,n.ɵl=j,n.ɵm=k,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.account.umd.min.js.map