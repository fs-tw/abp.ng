{"version":3,"file":"abp-ng.permission-management.js","sources":["../../../packages/permission-management/src/lib/actions/permission-management.actions.ts","../../../packages/permission-management/src/lib/proxy/permissions.service.ts","../../../packages/permission-management/src/lib/states/permission-management.state.ts","../../../packages/permission-management/src/lib/components/permission-management.component.ts","../../../packages/permission-management/src/lib/permission-management.module.ts","../../../packages/permission-management/src/lib/services/permission-management.service.ts","../../../packages/permission-management/src/lib/services/permission-management-state.service.ts","../../../packages/permission-management/src/public-api.ts","../../../packages/permission-management/src/abp-ng.permission-management.ts"],"sourcesContent":["import { PermissionManagement } from '../models/permission-management';\r\nimport { UpdatePermissionsDto } from '../proxy/models';\r\n\r\nexport class GetPermissions {\r\n  static readonly type = '[PermissionManagement] Get Permissions';\r\n  constructor(public payload: PermissionManagement.GrantedProvider) {}\r\n}\r\n\r\nexport class UpdatePermissions {\r\n  static readonly type = '[PermissionManagement] Update Permissions';\r\n  constructor(public payload: PermissionManagement.GrantedProvider & UpdatePermissionsDto) {}\r\n}\r\n","import type { GetPermissionListResultDto, UpdatePermissionsDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PermissionsService {\r\n  apiName = 'AbpPermissionManagement';\r\n\r\n  get = (providerName: string, providerKey: string) =>\r\n    this.restService.request<any, GetPermissionListResultDto>({\r\n      method: 'GET',\r\n      url: '/api/permission-management/permissions',\r\n      params: { providerName, providerKey },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  update = (providerName: string, providerKey: string, input: UpdatePermissionsDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'PUT',\r\n      url: '/api/permission-management/permissions',\r\n      params: { providerName, providerKey },\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport { GetPermissions, UpdatePermissions } from '../actions/permission-management.actions';\r\nimport { PermissionManagement } from '../models/permission-management';\r\nimport { PermissionsService } from '../proxy/permissions.service';\r\n\r\n@State<PermissionManagement.State>({\r\n  name: 'PermissionManagementState',\r\n  defaults: { permissionRes: {} } as PermissionManagement.State,\r\n})\r\n@Injectable()\r\nexport class PermissionManagementState {\r\n  @Selector()\r\n  static getPermissionGroups({ permissionRes }: PermissionManagement.State) {\r\n    return permissionRes.groups || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getEntityDisplayName({ permissionRes }: PermissionManagement.State): string {\r\n    return permissionRes.entityDisplayName;\r\n  }\r\n\r\n  constructor(private service: PermissionsService) {}\r\n\r\n  @Action(GetPermissions)\r\n  permissionManagementGet(\r\n    { patchState }: StateContext<PermissionManagement.State>,\r\n    {\r\n      payload: { providerKey, providerName } = {} as PermissionManagement.GrantedProvider,\r\n    }: GetPermissions,\r\n  ) {\r\n    return this.service.get(providerName, providerKey).pipe(\r\n      tap(permissionResponse =>\r\n        patchState({\r\n          permissionRes: permissionResponse,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(UpdatePermissions)\r\n  permissionManagementUpdate(_, { payload }: UpdatePermissions) {\r\n    return this.service.update(payload.providerName, payload.providerKey, {\r\n      permissions: payload.permissions,\r\n    });\r\n  }\r\n}\r\n","import { ApplicationConfiguration, ConfigState, GetAppConfiguration } from '@abp/ng.core';\r\nimport { LocaleDirection } from '@abp/ng.theme.shared';\r\nimport { Component, EventEmitter, Input, Output, Renderer2, TrackByFunction } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable, of } from 'rxjs';\r\nimport { finalize, map, pluck, switchMap, take, tap } from 'rxjs/operators';\r\nimport { GetPermissions, UpdatePermissions } from '../actions/permission-management.actions';\r\nimport { PermissionManagement } from '../models/permission-management';\r\nimport { UpdatePermissionDto } from '../proxy/models';\r\nimport { PermissionManagementState } from '../states/permission-management.state';\r\n\r\ntype PermissionWithStyle = PermissionManagement.Permission & {\r\n  style: string;\r\n};\r\n\r\n@Component({\r\n  selector: 'abp-permission-management',\r\n  templateUrl: './permission-management.component.html',\r\n  exportAs: 'abpPermissionManagement',\r\n  styles: [\r\n    `\r\n      .overflow-scroll {\r\n        max-height: 70vh;\r\n        overflow-y: scroll;\r\n      }\r\n    `,\r\n  ],\r\n})\r\nexport class PermissionManagementComponent\r\n  implements\r\n    PermissionManagement.PermissionManagementComponentInputs,\r\n    PermissionManagement.PermissionManagementComponentOutputs {\r\n  @Input()\r\n  readonly providerName: string;\r\n\r\n  @Input()\r\n  readonly providerKey: string;\r\n\r\n  @Input()\r\n  readonly hideBadges = false;\r\n\r\n  protected _visible = false;\r\n\r\n  @Input()\r\n  get visible(): boolean {\r\n    return this._visible;\r\n  }\r\n\r\n  set visible(value: boolean) {\r\n    if (value === this._visible) return;\r\n\r\n    if (value) {\r\n      this.openModal().subscribe(() => {\r\n        this._visible = true;\r\n        this.visibleChange.emit(true);\r\n      });\r\n    } else {\r\n      this.selectedGroup = null;\r\n      this._visible = false;\r\n      this.visibleChange.emit(false);\r\n    }\r\n  }\r\n\r\n  @Output() readonly visibleChange = new EventEmitter<boolean>();\r\n\r\n  @Select(PermissionManagementState.getPermissionGroups)\r\n  groups$: Observable<PermissionManagement.Group[]>;\r\n\r\n  @Select(PermissionManagementState.getEntityDisplayName)\r\n  entityName$: Observable<string>;\r\n\r\n  selectedGroup: PermissionManagement.Group;\r\n\r\n  permissions: PermissionManagement.Permission[] = [];\r\n\r\n  selectThisTab = false;\r\n\r\n  selectAllTab = false;\r\n\r\n  modalBusy = false;\r\n\r\n  trackByFn: TrackByFunction<PermissionManagement.Group> = (_, item) => item.name;\r\n\r\n  get selectedGroupPermissions$(): Observable<PermissionWithStyle[]> {\r\n    const margin = `margin-${\r\n      (document.body.dir as LocaleDirection) === 'rtl' ? 'right' : 'left'\r\n    }.px`;\r\n\r\n    return this.groups$.pipe(\r\n      map(groups =>\r\n        this.selectedGroup\r\n          ? groups.find(group => group.name === this.selectedGroup.name).permissions\r\n          : [],\r\n      ),\r\n      map<PermissionManagement.Permission[], PermissionWithStyle[]>(permissions =>\r\n        permissions.map(\r\n          permission =>\r\n            (({\r\n              ...permission,\r\n              style: { [margin]: findMargin(permissions, permission) },\r\n              isGranted: this.permissions.find(per => per.name === permission.name).isGranted,\r\n            } as any) as PermissionWithStyle),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  constructor(private store: Store, private renderer: Renderer2) {}\r\n\r\n  getChecked(name: string) {\r\n    return (this.permissions.find(per => per.name === name) || { isGranted: false }).isGranted;\r\n  }\r\n\r\n  isGrantedByOtherProviderName(grantedProviders: PermissionManagement.GrantedProvider[]): boolean {\r\n    if (grantedProviders.length) {\r\n      return grantedProviders.findIndex(p => p.providerName !== this.providerName) > -1;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  onClickCheckbox(clickedPermission: PermissionManagement.Permission, value) {\r\n    if (\r\n      clickedPermission.isGranted &&\r\n      this.isGrantedByOtherProviderName(clickedPermission.grantedProviders)\r\n    )\r\n      return;\r\n\r\n    setTimeout(() => {\r\n      this.permissions = this.permissions.map(per => {\r\n        if (clickedPermission.name === per.name) {\r\n          return { ...per, isGranted: !per.isGranted };\r\n        } else if (clickedPermission.name === per.parentName && clickedPermission.isGranted) {\r\n          return { ...per, isGranted: false };\r\n        } else if (clickedPermission.parentName === per.name && !clickedPermission.isGranted) {\r\n          return { ...per, isGranted: true };\r\n        }\r\n\r\n        return per;\r\n      });\r\n\r\n      this.setTabCheckboxState();\r\n      this.setGrantCheckboxState();\r\n    }, 0);\r\n  }\r\n\r\n  setTabCheckboxState() {\r\n    this.selectedGroupPermissions$.pipe(take(1)).subscribe(permissions => {\r\n      const selectedPermissions = permissions.filter(per => per.isGranted);\r\n      const element = document.querySelector('#select-all-in-this-tabs') as any;\r\n\r\n      if (selectedPermissions.length === permissions.length) {\r\n        element.indeterminate = false;\r\n        this.selectThisTab = true;\r\n      } else if (selectedPermissions.length === 0) {\r\n        element.indeterminate = false;\r\n        this.selectThisTab = false;\r\n      } else {\r\n        element.indeterminate = true;\r\n      }\r\n    });\r\n  }\r\n\r\n  setGrantCheckboxState() {\r\n    const selectedAllPermissions = this.permissions.filter(per => per.isGranted);\r\n    const checkboxElement = document.querySelector('#select-all-in-all-tabs') as any;\r\n\r\n    if (selectedAllPermissions.length === this.permissions.length) {\r\n      checkboxElement.indeterminate = false;\r\n      this.selectAllTab = true;\r\n    } else if (selectedAllPermissions.length === 0) {\r\n      checkboxElement.indeterminate = false;\r\n      this.selectAllTab = false;\r\n    } else {\r\n      checkboxElement.indeterminate = true;\r\n    }\r\n  }\r\n\r\n  onClickSelectThisTab() {\r\n    this.selectedGroupPermissions$.pipe(take(1)).subscribe(permissions => {\r\n      permissions.forEach(permission => {\r\n        if (permission.isGranted && this.isGrantedByOtherProviderName(permission.grantedProviders))\r\n          return;\r\n\r\n        const index = this.permissions.findIndex(per => per.name === permission.name);\r\n\r\n        this.permissions = [\r\n          ...this.permissions.slice(0, index),\r\n          { ...this.permissions[index], isGranted: !this.selectThisTab },\r\n          ...this.permissions.slice(index + 1),\r\n        ];\r\n      });\r\n    });\r\n\r\n    this.setGrantCheckboxState();\r\n  }\r\n\r\n  onClickSelectAll() {\r\n    this.permissions = this.permissions.map(permission => ({\r\n      ...permission,\r\n      isGranted:\r\n        this.isGrantedByOtherProviderName(permission.grantedProviders) || !this.selectAllTab,\r\n    }));\r\n\r\n    this.selectThisTab = !this.selectAllTab;\r\n  }\r\n\r\n  onChangeGroup(group: PermissionManagement.Group) {\r\n    this.selectedGroup = group;\r\n    this.setTabCheckboxState();\r\n  }\r\n\r\n  submit() {\r\n    const unchangedPermissions = getPermissions(\r\n      this.store.selectSnapshot(PermissionManagementState.getPermissionGroups),\r\n    );\r\n\r\n    const changedPermissions: UpdatePermissionDto[] = this.permissions\r\n      .filter(per =>\r\n        unchangedPermissions.find(unchanged => unchanged.name === per.name).isGranted ===\r\n        per.isGranted\r\n          ? false\r\n          : true,\r\n      )\r\n      .map(({ name, isGranted }) => ({ name, isGranted }));\r\n\r\n    if (!changedPermissions.length) {\r\n      this.visible = false;\r\n      return;\r\n    }\r\n\r\n    this.modalBusy = true;\r\n    this.store\r\n      .dispatch(\r\n        new UpdatePermissions({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n          permissions: changedPermissions,\r\n        }),\r\n      )\r\n      .pipe(\r\n        switchMap(() =>\r\n          this.shouldFetchAppConfig() ? this.store.dispatch(GetAppConfiguration) : of(null),\r\n        ),\r\n        finalize(() => (this.modalBusy = false)),\r\n      )\r\n      .subscribe(() => {\r\n        this.visible = false;\r\n      });\r\n  }\r\n\r\n  openModal() {\r\n    if (!this.providerKey || !this.providerName) {\r\n      throw new Error('Provider Key and Provider Name are required.');\r\n    }\r\n\r\n    return this.store\r\n      .dispatch(\r\n        new GetPermissions({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n        }),\r\n      )\r\n      .pipe(\r\n        pluck('PermissionManagementState', 'permissionRes'),\r\n        tap((permissionRes: PermissionManagement.Response) => {\r\n          this.selectedGroup = permissionRes.groups[0];\r\n          this.permissions = getPermissions(permissionRes.groups);\r\n        }),\r\n      );\r\n  }\r\n\r\n  initModal() {\r\n    this.setTabCheckboxState();\r\n    this.setGrantCheckboxState();\r\n  }\r\n\r\n  getAssignedCount(groupName: string) {\r\n    return this.permissions.reduce(\r\n      (acc, val) => (val.name.split('.')[0] === groupName && val.isGranted ? acc + 1 : acc),\r\n      0,\r\n    );\r\n  }\r\n\r\n  shouldFetchAppConfig() {\r\n    const currentUser = this.store.selectSnapshot(\r\n      ConfigState.getOne('currentUser'),\r\n    ) as ApplicationConfiguration.CurrentUser;\r\n\r\n    if (this.providerName === 'R') return currentUser.roles.some(role => role === this.providerKey);\r\n\r\n    if (this.providerName === 'U') return currentUser.id === this.providerKey;\r\n\r\n    return false;\r\n  }\r\n}\r\n\r\nfunction findMargin(\r\n  permissions: PermissionManagement.Permission[],\r\n  permission: PermissionManagement.Permission,\r\n) {\r\n  const parentPermission = permissions.find(per => per.name === permission.parentName);\r\n\r\n  if (parentPermission && parentPermission.parentName) {\r\n    let margin = 20;\r\n    return (margin += findMargin(permissions, parentPermission));\r\n  }\r\n\r\n  return parentPermission ? 20 : 0;\r\n}\r\n\r\nfunction getPermissions(groups: PermissionManagement.Group[]): PermissionManagement.Permission[] {\r\n  return groups.reduce((acc, val) => [...acc, ...val.permissions], []);\r\n}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { PermissionManagementComponent } from './components/permission-management.component';\r\nimport { PermissionManagementState } from './states/permission-management.state';\r\n\r\n@NgModule({\r\n  declarations: [PermissionManagementComponent],\r\n  imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([PermissionManagementState])],\r\n  exports: [PermissionManagementComponent],\r\n})\r\nexport class PermissionManagementModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { Observable } from 'rxjs';\r\nimport { PermissionManagement } from '../models/permission-management';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PermissionManagementService {\r\n  apiName = 'AbpPermissionManagement';\r\n\r\n  constructor(private rest: RestService) {}\r\n\r\n  getPermissions(\r\n    params: PermissionManagement.GrantedProvider,\r\n  ): Observable<PermissionManagement.Response> {\r\n    const request: Rest.Request<PermissionManagement.GrantedProvider> = {\r\n      method: 'GET',\r\n      url: '/api/permission-management/permissions',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<PermissionManagement.GrantedProvider, PermissionManagement.Response>(\r\n      request,\r\n      { apiName: this.apiName },\r\n    );\r\n  }\r\n\r\n  updatePermissions({\r\n    permissions,\r\n    providerKey,\r\n    providerName,\r\n  }: PermissionManagement.GrantedProvider & PermissionManagement.UpdateRequest): Observable<null> {\r\n    const request: Rest.Request<PermissionManagement.UpdateRequest> = {\r\n      method: 'PUT',\r\n      url: '/api/permission-management/permissions',\r\n      body: { permissions },\r\n      params: { providerKey, providerName },\r\n    };\r\n\r\n    return this.rest.request<PermissionManagement.UpdateRequest, null>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { PermissionManagementState } from '../states/permission-management.state';\r\nimport { PermissionManagement } from '../models';\r\nimport { GetPermissions, UpdatePermissions } from '../actions';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PermissionManagementStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  getPermissionGroups() {\r\n    return this.store.selectSnapshot(PermissionManagementState.getPermissionGroups);\r\n  }\r\n  getEntityDisplayName() {\r\n    return this.store.selectSnapshot(PermissionManagementState.getEntityDisplayName);\r\n  }\r\n\r\n  dispatchGetPermissions(...args: ConstructorParameters<typeof GetPermissions>) {\r\n    return this.store.dispatch(new GetPermissions(...args));\r\n  }\r\n\r\n  dispatchUpdatePermissions(...args: ConstructorParameters<typeof UpdatePermissions>) {\r\n    return this.store.dispatch(new UpdatePermissions(...args));\r\n  }\r\n}\r\n","/*\r\n * Public API Surface of permission-management\r\n */\r\n\r\nexport * from './lib/permission-management.module';\r\nexport * from './lib/actions';\r\nexport * from './lib/components';\r\nexport * from './lib/enums/components';\r\nexport * from './lib/models';\r\nexport * from './lib/services';\r\nexport * from './lib/states';\r\nexport * from './lib/proxy';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {GetPermissions as ɵd,UpdatePermissions as ɵe} from './lib/actions/permission-management.actions';\nexport {PermissionManagementComponent as ɵa} from './lib/components/permission-management.component';\nexport {PermissionManagement as ɵf} from './lib/models/permission-management';\nexport {PermissionsService as ɵc} from './lib/proxy/permissions.service';\nexport {PermissionManagementState as ɵb} from './lib/states/permission-management.state';"],"names":[],"mappings":"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"}