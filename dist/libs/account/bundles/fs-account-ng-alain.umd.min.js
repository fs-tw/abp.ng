!function(n,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@abp/ng.core"),require("@angular/core"),require("@fs/ng-alain/basic"),require("@abp/ng.account"),require("@abp/ng.theme.shared"),require("@angular/forms"),require("@ngxs/store"),require("angular-oauth2-oidc"),require("@angular/animations"),require("rxjs"),require("@ngx-validate/core")):"function"==typeof define&&define.amd?define("@fs/account/ng-alain",["exports","@abp/ng.core","@angular/core","@fs/ng-alain/basic","@abp/ng.account","@abp/ng.theme.shared","@angular/forms","@ngxs/store","angular-oauth2-oidc","@angular/animations","rxjs","@ngx-validate/core"],e):e(((n="undefined"!=typeof globalThis?globalThis:n||self).fs=n.fs||{},n.fs.account=n.fs.account||{},n.fs.account["ng-alain"]={}),n.ng_core,n.ng.core,n.basic,n.ng_account,n.ng_theme_shared,n.ng.forms,n.store,n.angularOauth2Oidc,n.ng.animations,n.rxjs,n.core$1)}(this,(function(n,e,r,t,o,a,i,l,p,s,c,m){"use strict";
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */var u=function(n,e){return(u=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(n,e){n.__proto__=e}||function(n,e){for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r])})(n,e)};function d(n,e){function r(){this.constructor=n}u(n,e),n.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function f(n,e,r,t){var o,a=arguments.length,i=a<3?e:null===t?t=Object.getOwnPropertyDescriptor(e,r):t;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(n,e,r,t);else for(var l=n.length-1;l>=0;l--)(o=n[l])&&(i=(a<3?o(i):a>3?o(e,r,i):o(e,r))||i);return a>3&&i&&Object.defineProperty(e,r,i),i}function g(n,e){return function(r,t){e(r,t,n)}}function z(n,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(n,e)}var b;function h(n){return Object.assign({redirectUrl:"/"},n)}n.ɵc=function(){function n(n,e){this.restService=n,this.store=e}return n.prototype.login=function(n){var r=this.store.selectSnapshot(e.SessionState.getTenant);return this.restService.request({url:"/api/token/authenticate",method:"POST",body:n,headers:Object.assign({},r&&r.id&&{__tenant:r.id})})},n}(),n.ɵc=f([r.Injectable(),z("design:paramtypes",[e.RestService,l.Store])],n.ɵc),n.UserLoginComponent=function(n){function e(e,r,t,o,a,i,l){var p=n.call(this,t,o,a,i,l)||this;return p.loginService=e,p.options=r,p._store=a,p._toasterService=i,p}return d(e,n),e}(o.LoginComponent),n.UserLoginComponent=f([r.Component({selector:"ng-alain-login",template:'<ng-alain-auth-wrapper [mainContentRef]="mainContentRef">\r\n  <ng-template #mainContentRef>\r\n    <form nz-form [formGroup]="form" (ngSubmit)="onSubmit()" role="form">\r\n      <nz-tabset [nzAnimated]="false" class="tabs">\r\n        <nz-tab [nzTitle]="\'AbpAccount::Login\' | abpLocalization">\r\n          <nz-form-item>\r\n            <nz-form-control [nzErrorTip]="\'Please enter mobile number!\' | abpLocalization">\r\n              <nz-input-group nzSize="large" nzPrefixIcon="user">\r\n                <input nz-input formControlName="username" placeholder="{{\'AbpAccount::UserNameOrEmailAddress\' | abpLocalization}}" />\r\n              </nz-input-group>\r\n            </nz-form-control>\r\n          </nz-form-item>\r\n          <nz-form-item>\r\n            <nz-form-control [nzErrorTip]="\'Please enter password!\' | abpLocalization">\r\n              <nz-input-group nzSize="large" nzPrefixIcon="lock">\r\n                <input nz-input type="password" formControlName="password" placeholder="{{ \'AbpAccount::Password\' | abpLocalization }}" />\r\n              </nz-input-group>\r\n            </nz-form-control>\r\n          </nz-form-item>\r\n        </nz-tab>\r\n      </nz-tabset>\r\n      <nz-form-item>\r\n        <nz-col [nzSpan]="12">\r\n          <label nz-checkbox formControlName="remember">{{ \'AbpAccount::RememberMe\' | abpLocalization }}</label>\r\n        </nz-col>\r\n      </nz-form-item>\r\n      <nz-form-item>\r\n        <button nz-button type="submit" nzType="primary" nzSize="large" [nzLoading]="inProgress" nzBlock>\r\n          {{ \'AbpAccount::Login\' | abpLocalization }}\r\n        </button>\r\n      </nz-form-item>\r\n    </form>\r\n    <div class="other">\r\n      <a class="register" routerLink="/account/register">{{ \'AbpAccount::Register\' | abpLocalization }}</a>\r\n    </div>\r\n  </ng-template>\r\n</ng-alain-auth-wrapper>\r\n\r\n',styles:[":host{display:block;margin:0 auto;width:368px}:host ::ng-deep .ant-tabs .ant-tabs-bar{border-bottom:0;margin-bottom:24px;text-align:center}:host ::ng-deep .ant-tabs-tab{font-size:16px;line-height:24px}:host ::ng-deep .ant-input-affix-wrapper .ant-input:not(:first-child){padding-left:34px}:host ::ng-deep .icon{color:rgba(0,0,0,.2);cursor:pointer;font-size:24px;margin-left:16px;transition:color .3s;vertical-align:middle}:host ::ng-deep .icon:hover{color:#1890ff}:host ::ng-deep .other{line-height:22px;margin-top:24px;text-align:left}:host ::ng-deep .other nz-tooltip{vertical-align:middle}:host ::ng-deep .other .register{float:right}"]}),g(1,r.Optional()),g(1,r.Inject("ACCOUNT_OPTIONS")),z("design:paramtypes",[n.ɵc,Object,i.FormBuilder,p.OAuthService,l.Store,a.ToasterService,e.AuthService])],n.UserLoginComponent),n.UserRegisterComponent=function(n){function e(e,r,t,o,a,i){var l=n.call(this,e,r,t,o,a,i)||this;return l._fb=e,l._accountService=r,l._oauthService=t,l._store=o,l._toasterService=a,l._authService=i,l}return d(e,n),e}(o.RegisterComponent),n.UserRegisterComponent=f([r.Component({selector:"fs-register",template:'<ng-alain-auth-wrapper [mainContentRef]="mainContentRef">\r\n  <ng-template #mainContentRef>\r\n    <h3>{{ \'AbpAccount::Register\' | abpLocalization }}</h3>\r\n    <form nz-form [formGroup]="form" (ngSubmit)="onSubmit()">\r\n      <nz-form-item>\r\n        <nz-form-control>\r\n          <nz-input-group nzSize="large">\r\n            <input nz-input formControlName="username" placeholder="{{ \'AbpAccount::UserName\' | abpLocalization }}" />\r\n          </nz-input-group>\r\n        </nz-form-control>\r\n      </nz-form-item>\r\n      <nz-form-item>\r\n        <nz-form-control>\r\n          <nz-input-group nzSize="large">\r\n            <input nz-input formControlName="email" placeholder="{{ \'AbpAccount::EmailAddress\' | abpLocalization }}" />\r\n          </nz-input-group>\r\n        </nz-form-control>\r\n      </nz-form-item>\r\n      <nz-form-item>\r\n        <nz-form-control>\r\n          <nz-input-group nzSize="large">\r\n            <input nz-input type="password" formControlName="password" placeholder="{{ \'AbpAccount::Password\' | abpLocalization }}" />\r\n          </nz-input-group>\r\n        </nz-form-control>\r\n      </nz-form-item>\r\n      <nz-form-item>\r\n        <button nz-button nzType="primary" nzSize="large" type="submit" [nzLoading]="inProgress" class="submit">\r\n          {{ \'AbpAccount::Register\' | abpLocalization }}\r\n        </button>\r\n        <a class="login" routerLink="/account/login">{{ \'AbpAccount::Login\' | abpLocalization }}</a>\r\n      </nz-form-item>\r\n    </form>\r\n  </ng-template>\r\n</ng-alain-auth-wrapper>\r\n\r\n',styles:[":host{display:block;margin:0 auto;width:368px}:host ::ng-deep h3{font-size:16px;margin-bottom:20px}:host ::ng-deep .submit{width:50%}:host ::ng-deep .login{float:right;line-height:40px}::ng-deep .register-password-cdk .error,::ng-deep .register-password-cdk .success,::ng-deep .register-password-cdk .warning{transition:color .3s}::ng-deep .register-password-cdk .success{color:#52c41a}::ng-deep .register-password-cdk .warning{color:#faad14}::ng-deep .register-password-cdk .error{color:#ff4d4f}::ng-deep .register-password-cdk .progress-pass>.progress .ant-progress-bg{background-color:#faad14}"]}),z("design:paramtypes",[i.FormBuilder,o.AccountService,p.OAuthService,l.Store,a.ToasterService,e.AuthService])],n.UserRegisterComponent),n.ManageProfileComponent=function(){this.selectedTab=0},n.ManageProfileComponent=f([r.Component({selector:"ng-alain-manage-profile",template:'<div class="row entry-row">\r\n  <div class="col-auto"></div>\r\n  <div id="breadcrumb" class="col-md-auto pl-md-0"></div>\r\n  <div class="col"></div>\r\n</div>\r\n<div class="main">\r\n  <div class="menu">\r\n    <ul nz-menu nzMode="inline">\r\n      <li nz-menu-item [nzSelected]="selectedTab === 0" (click)="selectedTab = 0">\r\n        {{\r\n            \'AbpUi::ChangePassword\' | abpLocalization\r\n        }}\r\n      </li>\r\n      <li nz-menu-item [nzSelected]="selectedTab === 1" (click)="selectedTab = 1">\r\n        {{\r\n            \'AbpAccount::PersonalSettings\' | abpLocalization\r\n        }}\r\n      </li>\r\n    </ul>\r\n  </div>\r\n  <div class="content">\r\n    <div class="title">{{ \'AbpAccount::ChangePassword\' | abpLocalization }}</div>\r\n    <ng-alain-change-password-form *ngIf="selectedTab === 0"></ng-alain-change-password-form>\r\n    <ng-alain-personal-settings-form *ngIf="selectedTab === 1"></ng-alain-personal-settings-form>\r\n  </div>\r\n\r\n</div>\r\n',animations:[s.trigger("fadeIn",[s.transition(":enter",s.useAnimation(a.fadeIn))])],styles:[":host{display:block;padding-top:24px}.main{background-color:#fff;display:flex;overflow:auto;padding-bottom:16px;padding-top:16px;width:100%}.menu{border-right:1px solid #f0f0f0;width:224px}.menu ::ng-deep .ant-menu-inline{border:none}.menu ::ng-deep .ant-menu:not(.ant-menu-horizontal) .ant-menu-item-selected{font-weight:700}.content{flex:1;padding:8px 40px}.content .title{color:rgba(0,0,0,.85);font-size:20px;font-weight:500;line-height:28px;margin-bottom:12px}.content ::ng-deep .ant-list-split .ant-list-item:last-child{border-bottom:1px solid #e8e8e8}.content ::ng-deep .ant-list-item{padding-bottom:14px;padding-top:14px}@media screen and (max-width:767px){.main{flex-direction:column}.main .menu{border:none;width:100%}.main .content{padding:40px}}"]})],n.ManageProfileComponent),n.ɵd=function(n){function e(e,r,t){var o=n.call(this,e,r,t)||this;return o._fb=e,o._store=r,o._toasterService=t,o}return d(e,n),e}(o.PersonalSettingsComponent),n.ɵd=f([r.Component({selector:"ng-alain-personal-settings-form",template:'<form novalidate *ngIf="form" [formGroup]="form" (ngSubmit)="submit()">\r\n  <nz-form-item>\r\n    <nz-form-label nzRequired nzFor="username">{{ \'AbpIdentity::DisplayName:UserName\' | abpLocalization }}</nz-form-label>\r\n    <nz-form-control>\r\n      <input nz-input formControlName="userName" id="username" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <nz-form-item>\r\n    <nz-form-label nzRequired nzFor="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</nz-form-label>\r\n    <nz-form-control>\r\n      <input nz-input formControlName="name" id="name" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <nz-form-item>\r\n    <nz-form-label nzRequired nzFor="surname">{{ \'AbpIdentity::DisplayName:Surname\' | abpLocalization }}</nz-form-label>\r\n    <nz-form-control>\r\n      <input nz-input formControlName="surname" id="surname" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <nz-form-item>\r\n    <nz-form-label nzRequired nzFor="email-address">{{ \'AbpIdentity::DisplayName:Email\' | abpLocalization }}</nz-form-label>\r\n    <nz-form-control>\r\n      <input nz-input formControlName="email" id="email-address" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <nz-form-item>\r\n    <nz-form-label nzRequired nzFor="phone-number">{{ \'AbpIdentity::DisplayName:PhoneNumber\' | abpLocalization }}</nz-form-label>\r\n    <nz-form-control>\r\n      <input nz-input formControlName="phoneNumber" id="phone-number" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <button nz-button nzType="primary">\r\n    {{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}\r\n  </button>\r\n</form>\r\n\r\n\r\n',styles:[""]}),z("design:paramtypes",[i.FormBuilder,l.Store,a.ToasterService])],n.ɵd),n.ɵe=function(n){function e(e,r,t){var o=n.call(this,e,r,t)||this;return o._fb=e,o._store=r,o._toasterService=t,o}return d(e,n),e}(o.ChangePasswordComponent),n.ɵe=f([r.Component({selector:"ng-alain-change-password-form",template:'<form [formGroup]="form" (ngSubmit)="onSubmit()" [mapErrorsFn]="mapErrorsFn">\r\n  <nz-form-item>\r\n    \x3c!--<nz-form-label nzRequired nzFor="current-password">{{ \'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization }}</nz-form-label>--\x3e\r\n    <nz-form-control>\r\n      <input nz-input type="password" formControlName="password" id="current-password" placeholder="{{\'AbpIdentity::DisplayName:CurrentPassword\' | abpLocalization}}" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <nz-form-item>\r\n    \x3c!--<nz-form-label nzRequired nzFor="new-password">{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}</nz-form-label>--\x3e\r\n    <nz-form-control>\r\n      <input nz-input type="password" formControlName="newPassword" id="new-password" placeholder="{{ \'AbpIdentity::DisplayName:NewPassword\' | abpLocalization }}" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <nz-form-item>\r\n    \x3c!--<nz-form-label nzRequired nzFor="confirm-new-password">{{ \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization }}</nz-form-label>--\x3e\r\n    <nz-form-control>\r\n      <input nz-input type="password" formControlName="repeatNewPassword" id="confirm-new-password" placeholder="{{ \'AbpIdentity::DisplayName:NewPasswordConfirm\' | abpLocalization }}" />\r\n    </nz-form-control>\r\n  </nz-form-item>\r\n  <button nz-button nzType="primary">\r\n    {{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}\r\n  </button>\r\n\r\n</form>\r\n\r\n\r\n',styles:[""]}),z("design:paramtypes",[i.FormBuilder,l.Store,a.ToasterService])],n.ɵe),n.ɵa=function(){},f([r.Input(),z("design:type",r.TemplateRef)],n.ɵa.prototype,"mainContentRef",void 0),f([r.Input(),z("design:type",r.TemplateRef)],n.ɵa.prototype,"cancelContentRef",void 0),n.ɵa=f([r.Component({selector:"ng-alain-auth-wrapper",template:'<ng-alain-tenant-box [mainContentRef]="mainContentRef">\r\n\r\n</ng-alain-tenant-box>\r\n\r\n<ng-content *ngTemplateOutlet="cancelContentRef"></ng-content>'})],n.ɵa),n.ɵb=function(n){function e(e,r,t){var o=n.call(this,e,r,t)||this;return o._store=e,o._toasterService=r,o._accountService=t,o}return d(e,n),e}(o.TenantBoxComponent),f([r.Input(),z("design:type",r.TemplateRef)],n.ɵb.prototype,"mainContentRef",void 0),f([l.Select(e.ConfigState.getDeep("multiTenancy.isEnabled")),z("design:type",c.Observable)],n.ɵb.prototype,"isMultiTenancyEnabled$",void 0),n.ɵb=f([r.Component({selector:"ng-alain-tenant-box",template:'<nz-card [nzTitle]="cardTitle" [nzExtra]="extraTemplate">\r\n  <ng-content *ngTemplateOutlet="mainContentRef"></ng-content>\r\n</nz-card>\r\n<ng-template #extraTemplate>\r\n  <a id="AbpTenantSwitchLink" href="javascript:void(0);" class="btn btn-sm mt-3 btn-outline-primary"\r\n    *ngIf="isMultiTenancyEnabled$ | async" (click)="onSwitch()">{{ \'AbpUiMultiTenancy::Switch\' | abpLocalization }}</a>\r\n</ng-template>\r\n\r\n<ng-template #cardTitle>\r\n  <div *ngIf="(currentTenant$ | async) || {} as currentTenant">\r\n    <span *ngIf="isMultiTenancyEnabled$ | async">\r\n      {{\'AbpUiMultiTenancy::Tenant\' | abpLocalization}}\r\n      ({{ currentTenant.name || (\'AbpUiMultiTenancy::NotSelected\' | abpLocalization) }})\r\n    </span>\r\n  </div>\r\n\r\n</ng-template>\r\n\r\n<nz-modal [nzStyle]="{ top: \'20px\' }" [(nzVisible)]="isModalVisible" [nzTitle]="modalTitle" [nzContent]="modalContent"\r\n  [nzFooter]="modalFooter" (nzOnCancel)="isModalVisible=false">\r\n  <ng-template #modalTitle>\r\n    {{\'AbpUiMultiTenancy::Tenant\' | abpLocalization}}\r\n  </ng-template>\r\n\r\n  <ng-template #modalContent>\r\n    <ng-template #loaderRef>\r\n      <div class="text-center"><i class="fa fa-pulse fa-spinner"></i></div>\r\n    </ng-template>\r\n\r\n    <form nz-form (ngSubmit)="save()">\r\n\r\n\r\n      <nz-form-item>\r\n        <nz-form-label [nzSm]="6" [nzXs]="24" nzRequired nzFor="name">{{ \'AbpUiMultiTenancy::Name\' | abpLocalization }}\r\n        </nz-form-label>\r\n        <nz-form-control [nzSm]="14" [nzXs]="24"\r\n          nzExtra="{{ \'AbpUiMultiTenancy::SwitchTenantHint\' | abpLocalization }}">\r\n          <input nz-input [(ngModel)]="name" id="name" name="name" />\r\n        </nz-form-control>\r\n      </nz-form-item>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #modalFooter>\r\n    <button nz-button nzType="default" (click)="isModalVisible=false">\r\n      {{ \'AbpTenantManagement::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <button nz-button nzType="primary" (click)="save()">\r\n      {{\r\n      \'AbpTenantManagement::Save\' | abpLocalization\r\n        }}\r\n    </button>\r\n  </ng-template>\r\n</nz-modal>'}),z("design:paramtypes",[l.Store,a.ToasterService,o.AccountService])],n.ɵb),n.AccountNgAlainModule=b=function(){function n(){}return n.forChild=function(n){return{ngModule:b,providers:[o.AuthenticationFlowGuard,{provide:o.ACCOUNT_OPTIONS,useValue:n},{provide:"ACCOUNT_OPTIONS",useFactory:h,deps:[o.ACCOUNT_OPTIONS]}]}},n.forLazy=function(n){return new e.LazyModuleFactory(b.forChild(n))},n}(),n.AccountNgAlainModule=b=f([r.NgModule({imports:[e.CoreModule,t.NgAlainBasicModule,m.NgxValidateCoreModule,o.AccountModule],declarations:[n.ɵa,n.ɵb,n.UserLoginComponent,n.UserRegisterComponent,n.ManageProfileComponent,n.ɵd,n.ɵe],entryComponents:[n.UserLoginComponent,n.UserRegisterComponent,n.ManageProfileComponent],providers:[n.ɵc]})],n.AccountNgAlainModule),n.accountOptionsFactory=h,Object.defineProperty(n,"__esModule",{value:!0})}));
//# sourceMappingURL=fs-account-ng-alain.umd.min.js.map