{"version":3,"file":"abp-ng.feature-management.js","sources":["../../../packages/feature-management/src/lib/actions/feature-management.actions.ts","../../../packages/feature-management/src/lib/services/feature-management.service.ts","../../../packages/feature-management/src/lib/states/feature-management.state.ts","../../../packages/feature-management/src/lib/components/feature-management/feature-management.component.ts","../../../packages/feature-management/src/lib/feature-management.module.ts","../../../packages/feature-management/src/abp-ng.feature-management.ts"],"sourcesContent":["import { FeatureManagement } from '../models';\r\n\r\nexport class GetFeatures {\r\n  static readonly type = '[FeatureManagement] Get Features';\r\n  constructor(public payload: FeatureManagement.Provider) {}\r\n}\r\n\r\nexport class UpdateFeatures {\r\n  static readonly type = '[FeatureManagement] Update Features';\r\n  constructor(public payload: FeatureManagement.Provider & FeatureManagement.Features) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RestService, Rest } from '@abp/ng.core';\r\nimport { Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { FeatureManagement } from '../models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FeatureManagementService {\r\n  apiName = 'FeatureManagement';\r\n\r\n  constructor(private rest: RestService, private store: Store) {}\r\n\r\n  getFeatures(params: FeatureManagement.Provider): Observable<FeatureManagement.Features> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/feature-management/features',\r\n      params,\r\n    };\r\n    return this.rest.request<FeatureManagement.Provider, FeatureManagement.Features>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  updateFeatures({\r\n    features,\r\n    providerKey,\r\n    providerName,\r\n  }: FeatureManagement.Provider & FeatureManagement.Features): Observable<null> {\r\n    const request: Rest.Request<FeatureManagement.Features> = {\r\n      method: 'PUT',\r\n      url: '/api/feature-management/features',\r\n      body: { features },\r\n      params: { providerKey, providerName },\r\n    };\r\n    return this.rest.request<FeatureManagement.Features, null>(request, { apiName: this.apiName });\r\n  }\r\n}\r\n","import { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { tap } from 'rxjs/operators';\r\nimport { GetFeatures, UpdateFeatures } from '../actions/feature-management.actions';\r\nimport { FeatureManagement } from '../models/feature-management';\r\nimport { FeatureManagementService } from '../services/feature-management.service';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@State<FeatureManagement.State>({\r\n  name: 'FeatureManagementState',\r\n  defaults: { features: {} } as FeatureManagement.State,\r\n})\r\n@Injectable()\r\nexport class FeatureManagementState {\r\n  @Selector()\r\n  static getFeatures({ features }: FeatureManagement.State) {\r\n    return features || [];\r\n  }\r\n\r\n  constructor(private featureManagementService: FeatureManagementService) {}\r\n\r\n  @Action(GetFeatures)\r\n  getFeatures({ patchState }: StateContext<FeatureManagement.State>, { payload }: GetFeatures) {\r\n    return this.featureManagementService.getFeatures(payload).pipe(\r\n      tap(({ features }) =>\r\n        patchState({\r\n          features,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(UpdateFeatures)\r\n  updateFeatures(_, { payload }: UpdateFeatures) {\r\n    return this.featureManagementService.updateFeatures(payload);\r\n  }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { GetFeatures, UpdateFeatures } from '../../actions';\r\nimport { FeatureManagement } from '../../models/feature-management';\r\nimport { FeatureManagementState } from '../../states';\r\nimport { FormGroup, FormControl } from '@angular/forms';\r\nimport { pluck, finalize } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'abp-feature-management',\r\n  templateUrl: './feature-management.component.html',\r\n  exportAs: 'abpFeatureManagement',\r\n})\r\nexport class FeatureManagementComponent\r\n  implements\r\n    FeatureManagement.FeatureManagementComponentInputs,\r\n    FeatureManagement.FeatureManagementComponentOutputs {\r\n  @Input()\r\n  providerKey: string;\r\n\r\n  @Input()\r\n  providerName: string;\r\n\r\n  protected _visible;\r\n\r\n  @Input()\r\n  get visible(): boolean {\r\n    return this._visible;\r\n  }\r\n\r\n  set visible(value: boolean) {\r\n    this._visible = value;\r\n    this.visibleChange.emit(value);\r\n\r\n    if (value) this.openModal();\r\n  }\r\n\r\n  @Output() readonly visibleChange = new EventEmitter<boolean>();\r\n\r\n  @Select(FeatureManagementState.getFeatures)\r\n  features$: Observable<FeatureManagement.Feature[]>;\r\n\r\n  modalBusy = false;\r\n\r\n  form: FormGroup;\r\n\r\n  constructor(private store: Store) {}\r\n\r\n  openModal() {\r\n    if (!this.providerKey || !this.providerName) {\r\n      throw new Error('Provider Key and Provider Name are required.');\r\n    }\r\n\r\n    this.getFeatures();\r\n  }\r\n\r\n  getFeatures() {\r\n    this.store\r\n      .dispatch(\r\n        new GetFeatures({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n        }),\r\n      )\r\n      .pipe(pluck('FeatureManagementState', 'features'))\r\n      .subscribe(features => {\r\n        this.buildForm(features);\r\n      });\r\n  }\r\n\r\n  buildForm(features) {\r\n    const formGroupObj = {};\r\n\r\n    for (let i = 0; i < features.length; i++) {\r\n      formGroupObj[i] = new FormControl(features[i].value === 'false' ? null : features[i].value);\r\n    }\r\n\r\n    this.form = new FormGroup(formGroupObj);\r\n  }\r\n\r\n  save() {\r\n    if (this.modalBusy) return;\r\n\r\n    this.modalBusy = true;\r\n\r\n    let features = this.store.selectSnapshot(FeatureManagementState.getFeatures);\r\n\r\n    features = features.map((feature, i) => ({\r\n      ...feature,\r\n      value: this.form.value[i],\r\n    }));\r\n\r\n    this.store\r\n      .dispatch(\r\n        new UpdateFeatures({\r\n          providerKey: this.providerKey,\r\n          providerName: this.providerName,\r\n          features,\r\n        }),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.visible = false;\r\n      });\r\n  }\r\n}\r\n","import { CoreModule } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { NgModule } from '@angular/core';\r\nimport { FeatureManagementComponent } from './components/feature-management/feature-management.component';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { FeatureManagementState } from './states/feature-management.state';\r\n\r\n@NgModule({\r\n  declarations: [FeatureManagementComponent],\r\n  imports: [CoreModule, ThemeSharedModule, NgxsModule.forFeature([FeatureManagementState])],\r\n  exports: [FeatureManagementComponent],\r\n})\r\nexport class FeatureManagementModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {GetFeatures as ɵe,UpdateFeatures as ɵf} from './lib/actions/feature-management.actions';\nexport {FeatureManagementComponent as ɵa} from './lib/components/feature-management/feature-management.component';\nexport {FeatureManagement as ɵg} from './lib/models';\nexport {FeatureManagementService as ɵd} from './lib/services/feature-management.service';\nexport {FeatureManagementState as ɵb} from './lib/states';\nexport {FeatureManagementState as ɵc} from './lib/states/feature-management.state';"],"names":[],"mappings":"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"}