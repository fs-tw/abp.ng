{"version":3,"file":"abp-ng.setting-management.js","sources":["../../../packages/setting-management/src/lib/actions/setting-management.actions.ts","../../../packages/setting-management/src/lib/states/setting-management.state.ts","../../../packages/setting-management/src/lib/components/setting-management.component.ts","../../../packages/setting-management/src/lib/setting-management-routing.module.ts","../../../packages/setting-management/src/lib/setting-management.module.ts","../../../packages/setting-management/src/abp-ng.setting-management.ts"],"sourcesContent":["import { ABP } from '@abp/ng.core';\r\n\r\nexport class SetSelectedSettingTab {\r\n  static readonly type = '[SettingManagement] Set Selected Tab';\r\n  constructor(public payload: ABP.Tab) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\r\nimport { SettingManagement } from '../models/setting-management';\r\n\r\n@State<SettingManagement.State>({\r\n  name: 'SettingManagementState',\r\n  defaults: {},\r\n})\r\n@Injectable()\r\nexport class SettingManagementState {\r\n  @Selector()\r\n  static getSelectedTab({ selectedTab }: SettingManagement.State) {\r\n    return selectedTab;\r\n  }\r\n\r\n  @Action(SetSelectedSettingTab)\r\n  settingManagementAction(\r\n    { patchState }: StateContext<SettingManagement.State>,\r\n    { payload }: SetSelectedSettingTab,\r\n  ) {\r\n    patchState({\r\n      selectedTab: payload,\r\n    });\r\n  }\r\n}\r\n","import { ABP, SettingTabsService } from '@abp/ng.core';\r\nimport { Component, OnDestroy, OnInit, TrackByFunction } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport { Subscription } from 'rxjs';\r\nimport { SetSelectedSettingTab } from '../actions/setting-management.actions';\r\nimport { SettingManagementState } from '../states/setting-management.state';\r\n\r\n@Component({\r\n  selector: 'abp-setting-management',\r\n  templateUrl: './setting-management.component.html',\r\n})\r\nexport class SettingManagementComponent implements OnDestroy, OnInit {\r\n  private subscription = new Subscription();\r\n  settings: ABP.Tab[] = [];\r\n\r\n  set selected(value: ABP.Tab) {\r\n    this.store.dispatch(new SetSelectedSettingTab(value));\r\n  }\r\n  get selected(): ABP.Tab {\r\n    const value = this.store.selectSnapshot(SettingManagementState.getSelectedTab);\r\n\r\n    return value?.component ? value : this.settings[0] || ({} as ABP.Tab);\r\n  }\r\n\r\n  trackByFn: TrackByFunction<ABP.Tab> = (_, item) => item.name;\r\n\r\n  constructor(private store: Store, private settingTabs: SettingTabsService) {}\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.subscription.add(\r\n      this.settingTabs.visible$.subscribe(settings => {\r\n        this.settings = settings;\r\n\r\n        if (!this.selected) this.selected = this.settings[0];\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import {\r\n  DynamicLayoutComponent,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n  AuthGuard,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { SettingManagementComponent } from './components/setting-management.component';\r\nimport { eSettingManagementComponents } from './enums/components';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    canActivate: [AuthGuard],\r\n    children: [\r\n      {\r\n        path: '',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpAccount.SettingManagement',\r\n          replaceableComponent: {\r\n            key: eSettingManagementComponents.SettingManagement,\r\n            defaultComponent: SettingManagementComponent,\r\n          } as ReplaceableComponents.RouteData,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class SettingManagementRoutingModule {}\r\n","import { CoreModule, LazyModuleFactory } from '@abp/ng.core';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { SettingManagementComponent } from './components/setting-management.component';\r\nimport { SettingManagementRoutingModule } from './setting-management-routing.module';\r\nimport { SettingManagementState } from './states/setting-management.state';\r\n\r\n@NgModule({\r\n  declarations: [SettingManagementComponent],\r\n  exports: [SettingManagementComponent],\r\n  imports: [\r\n    SettingManagementRoutingModule,\r\n    CoreModule,\r\n    ThemeSharedModule,\r\n    NgxsModule.forFeature([SettingManagementState]),\r\n  ],\r\n})\r\nexport class SettingManagementModule {\r\n  static forChild(): ModuleWithProviders<SettingManagementModule> {\r\n    return {\r\n      ngModule: SettingManagementModule,\r\n      providers: [],\r\n    };\r\n  }\r\n\r\n  static forLazy(): NgModuleFactory<SettingManagementModule> {\r\n    return new LazyModuleFactory(SettingManagementModule.forChild());\r\n  }\r\n}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {SetSelectedSettingTab as ɵd} from './lib/actions/setting-management.actions';\nexport {eSettingManagementComponents as ɵb} from './lib/enums/components';\nexport {SettingManagementRoutingModule as ɵa} from './lib/setting-management-routing.module';\nexport {SettingManagementState as ɵc} from './lib/states/setting-management.state';"],"names":[],"mappings":"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"}