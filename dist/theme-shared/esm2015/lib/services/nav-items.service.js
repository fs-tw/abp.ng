import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { NavItem } from '../models/nav-item';
import * as i0 from "@angular/core";
export class NavItemsService {
    constructor() {
        this._items$ = new BehaviorSubject([]);
    }
    get items() {
        return this._items$.value;
    }
    get items$() {
        return this._items$.asObservable();
    }
    addItems(newItems) {
        const items = [...this.items];
        newItems.forEach(item => items.push(new NavItem(item)));
        items.sort(sortItems);
        this._items$.next(items);
    }
    removeItem(id) {
        const index = this.items.findIndex(item => item.id === id);
        if (index < 0)
            return;
        const items = [...this.items.slice(0, index), ...this.items.slice(index + 1)];
        this._items$.next(items);
    }
    patchItem(id, item) {
        const index = this.items.findIndex(i => i.id === id);
        if (index < 0)
            return;
        const items = [...this.items];
        items[index] = new NavItem(Object.assign(Object.assign({}, items[index]), item));
        items.sort(sortItems);
        this._items$.next(items);
    }
}
NavItemsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NavItemsService_Factory() { return new NavItemsService(); }, token: NavItemsService, providedIn: "root" });
NavItemsService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
function sortItems(a, b) {
    if (!a.order)
        return 1;
    if (!b.order)
        return -1;
    return a.order - b.order;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF2LWl0ZW1zLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy90aGVtZS1zaGFyZWQvc3JjL2xpYi9zZXJ2aWNlcy9uYXYtaXRlbXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxlQUFlLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDbkQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFDOztBQUc3QyxNQUFNLE9BQU8sZUFBZTtJQUQ1QjtRQUVVLFlBQU8sR0FBRyxJQUFJLGVBQWUsQ0FBWSxFQUFFLENBQUMsQ0FBQztLQW9DdEQ7SUFsQ0MsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7SUFFRCxRQUFRLENBQUMsUUFBbUI7UUFDMUIsTUFBTSxLQUFLLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUM5QixRQUFRLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRUQsVUFBVSxDQUFDLEVBQW1CO1FBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUUzRCxJQUFJLEtBQUssR0FBRyxDQUFDO1lBQUUsT0FBTztRQUV0QixNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVELFNBQVMsQ0FBQyxFQUFtQixFQUFFLElBQWtDO1FBQy9ELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztRQUVyRCxJQUFJLEtBQUssR0FBRyxDQUFDO1lBQUUsT0FBTztRQUV0QixNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzlCLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLE9BQU8saUNBQU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFLLElBQUksRUFBRyxDQUFDO1FBQ3pELEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7OztZQXJDRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOztBQXdDbEMsU0FBUyxTQUFTLENBQUMsQ0FBVSxFQUFFLENBQVU7SUFDdkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQUUsT0FBTyxDQUFDLENBQUM7SUFDdkIsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLO1FBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUV4QixPQUFPLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztBQUMzQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgTmF2SXRlbSB9IGZyb20gJy4uL21vZGVscy9uYXYtaXRlbSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgTmF2SXRlbXNTZXJ2aWNlIHtcclxuICBwcml2YXRlIF9pdGVtcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE5hdkl0ZW1bXT4oW10pO1xyXG5cclxuICBnZXQgaXRlbXMoKTogTmF2SXRlbVtdIHtcclxuICAgIHJldHVybiB0aGlzLl9pdGVtcyQudmFsdWU7XHJcbiAgfVxyXG5cclxuICBnZXQgaXRlbXMkKCk6IE9ic2VydmFibGU8TmF2SXRlbVtdPiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXRlbXMkLmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgYWRkSXRlbXMobmV3SXRlbXM6IE5hdkl0ZW1bXSkge1xyXG4gICAgY29uc3QgaXRlbXMgPSBbLi4udGhpcy5pdGVtc107XHJcbiAgICBuZXdJdGVtcy5mb3JFYWNoKGl0ZW0gPT4gaXRlbXMucHVzaChuZXcgTmF2SXRlbShpdGVtKSkpO1xyXG4gICAgaXRlbXMuc29ydChzb3J0SXRlbXMpO1xyXG4gICAgdGhpcy5faXRlbXMkLm5leHQoaXRlbXMpO1xyXG4gIH1cclxuXHJcbiAgcmVtb3ZlSXRlbShpZDogc3RyaW5nIHwgbnVtYmVyKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaXRlbXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gaWQpO1xyXG5cclxuICAgIGlmIChpbmRleCA8IDApIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpdGVtcyA9IFsuLi50aGlzLml0ZW1zLnNsaWNlKDAsIGluZGV4KSwgLi4udGhpcy5pdGVtcy5zbGljZShpbmRleCArIDEpXTtcclxuICAgIHRoaXMuX2l0ZW1zJC5uZXh0KGl0ZW1zKTtcclxuICB9XHJcblxyXG4gIHBhdGNoSXRlbShpZDogc3RyaW5nIHwgbnVtYmVyLCBpdGVtOiBQYXJ0aWFsPE9taXQ8TmF2SXRlbSwgJ2lkJz4+KSB7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuaXRlbXMuZmluZEluZGV4KGkgPT4gaS5pZCA9PT0gaWQpO1xyXG5cclxuICAgIGlmIChpbmRleCA8IDApIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBpdGVtcyA9IFsuLi50aGlzLml0ZW1zXTtcclxuICAgIGl0ZW1zW2luZGV4XSA9IG5ldyBOYXZJdGVtKHsgLi4uaXRlbXNbaW5kZXhdLCAuLi5pdGVtIH0pO1xyXG4gICAgaXRlbXMuc29ydChzb3J0SXRlbXMpO1xyXG4gICAgdGhpcy5faXRlbXMkLm5leHQoaXRlbXMpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc29ydEl0ZW1zKGE6IE5hdkl0ZW0sIGI6IE5hdkl0ZW0pIHtcclxuICBpZiAoIWEub3JkZXIpIHJldHVybiAxO1xyXG4gIGlmICghYi5vcmRlcikgcmV0dXJuIC0xO1xyXG5cclxuICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXI7XHJcbn1cclxuIl19