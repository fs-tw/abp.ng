{"version":3,"file":"abp-ng.identity.js","sources":["../../../packages/identity/src/lib/actions/identity.actions.ts","../../../packages/identity/src/lib/proxy/identity/identity-role.service.ts","../../../packages/identity/src/lib/proxy/identity/identity-user.service.ts","../../../packages/identity/src/lib/states/identity.state.ts","../../../packages/identity/src/lib/components/roles/roles.component.ts","../../../packages/identity/src/lib/services/identity.service.ts","../../../packages/identity/src/lib/components/users/users.component.ts","../../../packages/identity/src/lib/identity-routing.module.ts","../../../packages/identity/src/lib/identity.module.ts","../../../packages/identity/src/lib/services/identity-state.service.ts","../../../packages/identity/src/lib/proxy/identity/identity-user-lookup.service.ts","../../../packages/identity/src/lib/proxy/identity/profile.service.ts","../../../packages/identity/src/public-api.ts","../../../packages/identity/src/abp-ng.identity.ts"],"sourcesContent":["import { Identity } from '../models/identity';\r\nimport { ABP, PagedAndSortedResultRequestDto } from '@abp/ng.core';\r\nimport {\r\n  GetIdentityUsersInput,\r\n  IdentityRoleCreateDto,\r\n  IdentityRoleUpdateDto,\r\n  IdentityUserCreateDto,\r\n  IdentityUserUpdateDto,\r\n} from '../proxy/identity/models';\r\n\r\nexport class GetRoles {\r\n  static readonly type = '[Identity] Get Roles';\r\n  constructor(public payload?: PagedAndSortedResultRequestDto) {}\r\n}\r\n\r\nexport class GetRoleById {\r\n  static readonly type = '[Identity] Get Role By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteRole {\r\n  static readonly type = '[Identity] Delete Role';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateRole {\r\n  static readonly type = '[Identity] Create Role';\r\n  constructor(public payload: IdentityRoleCreateDto) {}\r\n}\r\n\r\nexport class UpdateRole {\r\n  static readonly type = '[Identity] Update Role';\r\n  constructor(public payload: IdentityRoleUpdateDto & { id: string }) {}\r\n}\r\n\r\nexport class GetUsers {\r\n  static readonly type = '[Identity] Get Users';\r\n  constructor(public payload?: GetIdentityUsersInput) {}\r\n}\r\n\r\nexport class GetUserById {\r\n  static readonly type = '[Identity] Get User By Id';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class DeleteUser {\r\n  static readonly type = '[Identity] Delete User';\r\n  constructor(public payload: string) {}\r\n}\r\n\r\nexport class CreateUser {\r\n  static readonly type = '[Identity] Create User';\r\n  constructor(public payload: IdentityUserCreateDto) {}\r\n}\r\n\r\nexport class UpdateUser {\r\n  static readonly type = '[Identity] Update User';\r\n  constructor(public payload: IdentityUserUpdateDto & { id: string }) {}\r\n}\r\n\r\nexport class GetUserRoles {\r\n  static readonly type = '[Identity] Get User Roles';\r\n  constructor(public payload: string) {}\r\n}\r\n","import type { ListResultDto, PagedAndSortedResultRequestDto, PagedResultDto } from '@abp/ng.core';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport type { IdentityRoleCreateDto, IdentityRoleDto, IdentityRoleUpdateDto } from './models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IdentityRoleService {\r\n  apiName = 'AbpIdentity';\r\n\r\n  create = (input: IdentityRoleCreateDto) =>\r\n    this.restService.request<any, IdentityRoleDto>({\r\n      method: 'POST',\r\n      url: '/api/identity/roles',\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  delete = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/identity/roles/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  get = (id: string) =>\r\n    this.restService.request<any, IdentityRoleDto>({\r\n      method: 'GET',\r\n      url: `/api/identity/roles/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getAllList = () =>\r\n    this.restService.request<any, ListResultDto<IdentityRoleDto>>({\r\n      method: 'GET',\r\n      url: '/api/identity/roles/all',\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getList = (input: PagedAndSortedResultRequestDto) =>\r\n    this.restService.request<any, PagedResultDto<IdentityRoleDto>>({\r\n      method: 'GET',\r\n      url: '/api/identity/roles',\r\n      params: { sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  update = (id: string, input: IdentityRoleUpdateDto) =>\r\n    this.restService.request<any, IdentityRoleDto>({\r\n      method: 'PUT',\r\n      url: `/api/identity/roles/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type {\r\n  GetIdentityUsersInput,\r\n  IdentityRoleDto,\r\n  IdentityUserCreateDto,\r\n  IdentityUserDto,\r\n  IdentityUserUpdateDto,\r\n  IdentityUserUpdateRolesDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto, PagedResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IdentityUserService {\r\n  apiName = 'AbpIdentity';\r\n\r\n  create = (input: IdentityUserCreateDto) =>\r\n    this.restService.request<any, IdentityUserDto>({\r\n      method: 'POST',\r\n      url: '/api/identity/users',\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  delete = (id: string) =>\r\n    this.restService.request<any, void>({\r\n      method: 'DELETE',\r\n      url: `/api/identity/users/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  findByEmail = (email: string) =>\r\n    this.restService.request<any, IdentityUserDto>({\r\n      method: 'GET',\r\n      url: `/api/identity/users/by-email/${email}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  findByUsername = (username: string) =>\r\n    this.restService.request<any, IdentityUserDto>({\r\n      method: 'GET',\r\n      url: '/api/identity/users/by-username/{userName}',\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  get = (id: string) =>\r\n    this.restService.request<any, IdentityUserDto>({\r\n      method: 'GET',\r\n      url: `/api/identity/users/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getAssignableRoles = () =>\r\n    this.restService.request<any, ListResultDto<IdentityRoleDto>>({\r\n      method: 'GET',\r\n      url: '/api/identity/users/assignable-roles',\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getList = (input: GetIdentityUsersInput) =>\r\n    this.restService.request<any, PagedResultDto<IdentityUserDto>>({\r\n      method: 'GET',\r\n      url: '/api/identity/users',\r\n      params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getRoles = (id: string) =>\r\n    this.restService.request<any, ListResultDto<IdentityRoleDto>>({\r\n      method: 'GET',\r\n      url: `/api/identity/users/${id}/roles`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  update = (id: string, input: IdentityUserUpdateDto) =>\r\n    this.restService.request<any, IdentityUserDto>({\r\n      method: 'PUT',\r\n      url: `/api/identity/users/${id}`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  updateRoles = (id: string, input: IdentityUserUpdateRolesDto) =>\r\n    this.restService.request<any, void>({\r\n      method: 'PUT',\r\n      url: `/api/identity/users/${id}/roles`,\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Action, Selector, State, StateContext } from '@ngxs/store';\r\nimport { pluck, tap } from 'rxjs/operators';\r\nimport {\r\n  CreateRole,\r\n  CreateUser,\r\n  DeleteRole,\r\n  DeleteUser,\r\n  GetRoleById,\r\n  GetRoles,\r\n  GetUserById,\r\n  GetUserRoles,\r\n  GetUsers,\r\n  UpdateRole,\r\n  UpdateUser,\r\n} from '../actions/identity.actions';\r\nimport { Identity } from '../models/identity';\r\nimport { IdentityRoleService } from '../proxy/identity/identity-role.service';\r\nimport { IdentityUserService } from '../proxy/identity/identity-user.service';\r\nimport { IdentityUserDto } from '../proxy/identity/models';\r\n\r\n@State<Identity.State>({\r\n  name: 'IdentityState',\r\n  defaults: { roles: {}, selectedRole: {}, users: {}, selectedUser: {} } as Identity.State,\r\n})\r\n@Injectable()\r\nexport class IdentityState {\r\n  @Selector()\r\n  static getRoles({ roles }: Identity.State): Identity.RoleItem[] {\r\n    return roles.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getRolesTotalCount({ roles }: Identity.State): number {\r\n    return roles.totalCount || 0;\r\n  }\r\n\r\n  @Selector()\r\n  static getUsers({ users }: Identity.State): IdentityUserDto[] {\r\n    return users.items || [];\r\n  }\r\n\r\n  @Selector()\r\n  static getUsersTotalCount({ users }: Identity.State): number {\r\n    return users.totalCount || 0;\r\n  }\r\n\r\n  constructor(\r\n    private identityUserService: IdentityUserService,\r\n    private identityRoleService: IdentityRoleService,\r\n  ) {}\r\n\r\n  @Action(GetRoles)\r\n  getRoles({ patchState }: StateContext<Identity.State>, { payload }: GetRoles) {\r\n    return this.identityRoleService.getList(payload).pipe(\r\n      tap(roles =>\r\n        patchState({\r\n          roles,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetRoleById)\r\n  getRole({ patchState }: StateContext<Identity.State>, { payload }: GetRoleById) {\r\n    return this.identityRoleService.get(payload).pipe(\r\n      tap(selectedRole =>\r\n        patchState({\r\n          selectedRole,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteRole)\r\n  deleteRole(_, { payload }: GetRoleById) {\r\n    return this.identityRoleService.delete(payload);\r\n  }\r\n\r\n  @Action(CreateRole)\r\n  addRole(_, { payload }: CreateRole) {\r\n    return this.identityRoleService.create(payload);\r\n  }\r\n\r\n  @Action(UpdateRole)\r\n  updateRole({ getState }: StateContext<Identity.State>, { payload }: UpdateRole) {\r\n    return this.identityRoleService.update(payload.id, { ...getState().selectedRole, ...payload });\r\n  }\r\n\r\n  @Action(GetUsers)\r\n  getUsers({ patchState }: StateContext<Identity.State>, { payload }: GetUsers) {\r\n    return this.identityUserService.getList(payload).pipe(\r\n      tap(users =>\r\n        patchState({\r\n          users,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(GetUserById)\r\n  getUser({ patchState }: StateContext<Identity.State>, { payload }: GetUserById) {\r\n    return this.identityUserService.get(payload).pipe(\r\n      tap(selectedUser =>\r\n        patchState({\r\n          selectedUser,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n\r\n  @Action(DeleteUser)\r\n  deleteUser(_, { payload }: GetUserById) {\r\n    return this.identityUserService.delete(payload);\r\n  }\r\n\r\n  @Action(CreateUser)\r\n  addUser(_, { payload }: CreateUser) {\r\n    return this.identityUserService.create(payload);\r\n  }\r\n\r\n  @Action(UpdateUser)\r\n  updateUser({ getState }: StateContext<Identity.State>, { payload }: UpdateUser) {\r\n    return this.identityUserService.update(payload.id, { ...getState().selectedUser, ...payload });\r\n  }\r\n\r\n  @Action(GetUserRoles)\r\n  getUserRoles({ patchState }: StateContext<Identity.State>, { payload }: GetUserRoles) {\r\n    return this.identityUserService.getRoles(payload).pipe(\r\n      pluck('items'),\r\n      tap(selectedUserRoles =>\r\n        patchState({\r\n          selectedUserRoles,\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n}\r\n","import { ListService, PagedAndSortedResultRequestDto } from '@abp/ng.core';\r\nimport { ePermissionManagementComponents } from '@abp/ng.permission-management';\r\nimport { Confirmation, ConfirmationService } from '@abp/ng.theme.shared';\r\nimport { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck } from 'rxjs/operators';\r\nimport {\r\n  CreateRole,\r\n  DeleteRole,\r\n  GetRoleById,\r\n  GetRoles,\r\n  UpdateRole,\r\n} from '../../actions/identity.actions';\r\nimport { IdentityRoleDto } from '../../proxy/identity/models';\r\nimport { IdentityState } from '../../states/identity.state';\r\n\r\n@Component({\r\n  selector: 'abp-roles',\r\n  templateUrl: './roles.component.html',\r\n  providers: [ListService],\r\n})\r\nexport class RolesComponent implements OnInit {\r\n  @Select(IdentityState.getRoles)\r\n  data$: Observable<IdentityRoleDto[]>;\r\n\r\n  @Select(IdentityState.getRolesTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  form: FormGroup;\r\n\r\n  selected: IdentityRoleDto;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  visiblePermissions = false;\r\n\r\n  providerKey: string;\r\n\r\n  modalBusy = false;\r\n\r\n  permissionManagementKey = ePermissionManagementComponents.PermissionManagement;\r\n\r\n  @ViewChild('formRef', { static: false, read: ElementRef })\r\n  formRef: ElementRef<HTMLFormElement>;\r\n\r\n  onVisiblePermissionChange = event => {\r\n    this.visiblePermissions = event;\r\n  };\r\n\r\n  constructor(\r\n    public readonly list: ListService<PagedAndSortedResultRequestDto>,\r\n    private confirmationService: ConfirmationService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.hookToQuery();\r\n  }\r\n\r\n  buildForm() {\r\n    this.form = this.fb.group({\r\n      name: new FormControl({ value: this.selected.name || '', disabled: this.selected.isStatic }, [\r\n        Validators.required,\r\n        Validators.maxLength(256),\r\n      ]),\r\n      isDefault: [this.selected.isDefault || false],\r\n      isPublic: [this.selected.isPublic || false],\r\n    });\r\n  }\r\n\r\n  openModal() {\r\n    this.buildForm();\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  add() {\r\n    this.selected = {} as IdentityRoleDto;\r\n    this.openModal();\r\n  }\r\n\r\n  edit(id: string) {\r\n    this.store\r\n      .dispatch(new GetRoleById(id))\r\n      .pipe(pluck('IdentityState', 'selectedRole'))\r\n      .subscribe(selectedRole => {\r\n        this.selected = selectedRole;\r\n        this.openModal();\r\n      });\r\n  }\r\n\r\n  save() {\r\n    if (!this.form.valid) return;\r\n    this.modalBusy = true;\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateRole({ ...this.selected, ...this.form.value, id: this.selected.id })\r\n          : new CreateRole(this.form.value),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.list.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, name: string) {\r\n    this.confirmationService\r\n      .warn('AbpIdentity::RoleDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\r\n        messageLocalizationParams: [name],\r\n      })\r\n      .subscribe((status: Confirmation.Status) => {\r\n        if (status === Confirmation.Status.confirm) {\r\n          this.store.dispatch(new DeleteRole(id)).subscribe(() => this.list.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  private hookToQuery() {\r\n    this.list.hookToQuery(query => this.store.dispatch(new GetRoles(query))).subscribe();\r\n  }\r\n\r\n  onClickSaveButton() {\r\n    this.formRef.nativeElement.dispatchEvent(\r\n      new Event('submit', { bubbles: true, cancelable: true }),\r\n    );\r\n  }\r\n\r\n  openPermissionsModal(providerKey: string) {\r\n    this.providerKey = providerKey;\r\n    setTimeout(() => {\r\n      this.visiblePermissions = true;\r\n    }, 0);\r\n  }\r\n\r\n  sort(data) {\r\n    const { prop, dir } = data.sorts[0];\r\n    this.list.sortKey = prop;\r\n    this.list.sortOrder = dir;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { RestService, Rest, ABP } from '@abp/ng.core';\r\nimport { Identity } from '../models/identity';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IdentityService {\r\n  apiName = 'AbpIdentity';\r\n\r\n  constructor(private rest: RestService) {}\r\n\r\n  getRoles(params = {} as ABP.PageQueryParams): Observable<Identity.RoleResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/identity/roles',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleResponse>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  getAllRoles(): Observable<Identity.RoleResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/identity/roles/all',\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleResponse>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  getRoleById(id: string): Observable<Identity.RoleItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/identity/roles/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleItem>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  deleteRole(id: string): Observable<Identity.RoleItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/identity/roles/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleItem>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  createRole(body: Identity.RoleSaveRequest): Observable<Identity.RoleItem> {\r\n    const request: Rest.Request<Identity.RoleSaveRequest> = {\r\n      method: 'POST',\r\n      url: '/api/identity/roles',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.RoleSaveRequest, Identity.RoleItem>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  updateRole(body: Identity.RoleItem): Observable<Identity.RoleItem> {\r\n    const url = `/api/identity/roles/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<Identity.RoleItem> = {\r\n      method: 'PUT',\r\n      url,\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.RoleItem, Identity.RoleItem>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  getUsers(params = {} as ABP.PageQueryParams): Observable<Identity.UserResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/identity/users',\r\n      params,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.UserResponse>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  getUserById(id: string): Observable<Identity.UserItem> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/identity/users/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.UserItem>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  getUserRoles(id: string): Observable<Identity.RoleResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: `/api/identity/users/${id}/roles`,\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleResponse>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  getUserAssingableRoles(): Observable<Identity.RoleResponse> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'GET',\r\n      url: '/api/identity/users/assignable-roles',\r\n    };\r\n\r\n    return this.rest.request<null, Identity.RoleResponse>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  deleteUser(id: string): Observable<null> {\r\n    const request: Rest.Request<null> = {\r\n      method: 'DELETE',\r\n      url: `/api/identity/users/${id}`,\r\n    };\r\n\r\n    return this.rest.request<null, null>(request, { apiName: this.apiName });\r\n  }\r\n\r\n  createUser(body: Identity.UserSaveRequest): Observable<Identity.UserItem> {\r\n    const request: Rest.Request<Identity.UserSaveRequest> = {\r\n      method: 'POST',\r\n      url: '/api/identity/users',\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.UserSaveRequest, Identity.UserItem>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n\r\n  updateUser(body: Identity.UserItem): Observable<Identity.UserItem> {\r\n    const url = `/api/identity/users/${body.id}`;\r\n    delete body.id;\r\n\r\n    const request: Rest.Request<Identity.UserItem> = {\r\n      method: 'PUT',\r\n      url,\r\n      body,\r\n    };\r\n\r\n    return this.rest.request<Identity.UserItem, Identity.UserItem>(request, {\r\n      apiName: this.apiName,\r\n    });\r\n  }\r\n}\r\n","import { ListService } from '@abp/ng.core';\r\nimport { ePermissionManagementComponents } from '@abp/ng.permission-management';\r\nimport { Confirmation, ConfirmationService, getPasswordValidators } from '@abp/ng.theme.shared';\r\nimport { Component, OnInit, TemplateRef, TrackByFunction, ViewChild } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormArray,\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize, pluck, switchMap, take } from 'rxjs/operators';\r\nimport snq from 'snq';\r\nimport {\r\n  CreateUser,\r\n  DeleteUser,\r\n  GetUserById,\r\n  GetUserRoles,\r\n  GetUsers,\r\n  UpdateUser,\r\n} from '../../actions/identity.actions';\r\nimport { Identity } from '../../models/identity';\r\nimport { IdentityRoleService } from '../../proxy/identity/identity-role.service';\r\nimport { IdentityUserService } from '../../proxy/identity/identity-user.service';\r\nimport {\r\n  GetIdentityUsersInput,\r\n  IdentityRoleDto,\r\n  IdentityUserDto,\r\n} from '../../proxy/identity/models';\r\nimport { IdentityService } from '../../services/identity.service';\r\nimport { IdentityState } from '../../states/identity.state';\r\n\r\n@Component({\r\n  selector: 'abp-users',\r\n  templateUrl: './users.component.html',\r\n  providers: [ListService],\r\n})\r\nexport class UsersComponent implements OnInit {\r\n  @Select(IdentityState.getUsers)\r\n  data$: Observable<IdentityUserDto[]>;\r\n\r\n  @Select(IdentityState.getUsersTotalCount)\r\n  totalCount$: Observable<number>;\r\n\r\n  @ViewChild('modalContent', { static: false })\r\n  modalContent: TemplateRef<any>;\r\n\r\n  form: FormGroup;\r\n\r\n  selected: IdentityUserDto;\r\n\r\n  selectedUserRoles: IdentityRoleDto[];\r\n\r\n  roles: IdentityRoleDto[];\r\n\r\n  visiblePermissions = false;\r\n\r\n  providerKey: string;\r\n\r\n  isModalVisible: boolean;\r\n\r\n  modalBusy = false;\r\n\r\n  permissionManagementKey = ePermissionManagementComponents.PermissionManagement;\r\n\r\n  trackByFn: TrackByFunction<AbstractControl> = (index, item) => Object.keys(item)[0] || index;\r\n\r\n  onVisiblePermissionChange = event => {\r\n    this.visiblePermissions = event;\r\n  };\r\n\r\n  get roleGroups(): FormGroup[] {\r\n    return snq(() => (this.form.get('roleNames') as FormArray).controls as FormGroup[], []);\r\n  }\r\n\r\n  constructor(\r\n    public readonly list: ListService<GetIdentityUsersInput>,\r\n    private confirmationService: ConfirmationService,\r\n    private fb: FormBuilder,\r\n    private store: Store,\r\n    private identityService: IdentityService,\r\n    private identityUserService: IdentityUserService,\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.hookToQuery();\r\n  }\r\n\r\n  buildForm() {\r\n    this.identityUserService.getAssignableRoles().subscribe(({ items }) => {\r\n      this.roles = items;\r\n      this.form = this.fb.group({\r\n        userName: [this.selected.userName || '', [Validators.required, Validators.maxLength(256)]],\r\n        email: [\r\n          this.selected.email || '',\r\n          [Validators.required, Validators.email, Validators.maxLength(256)],\r\n        ],\r\n        name: [this.selected.name || '', [Validators.maxLength(64)]],\r\n        surname: [this.selected.surname || '', [Validators.maxLength(64)]],\r\n        phoneNumber: [this.selected.phoneNumber || '', [Validators.maxLength(16)]],\r\n        lockoutEnabled: [this.selected.id ? this.selected.lockoutEnabled : true],\r\n        roleNames: this.fb.array(\r\n          this.roles.map(role =>\r\n            this.fb.group({\r\n              [role.name]: [\r\n                this.selected.id\r\n                  ? !!snq(() => this.selectedUserRoles.find(userRole => userRole.id === role.id))\r\n                  : role.isDefault,\r\n              ],\r\n            }),\r\n          ),\r\n        ),\r\n      });\r\n\r\n      const passwordValidators = getPasswordValidators(this.store);\r\n\r\n      this.form.addControl('password', new FormControl('', [...passwordValidators]));\r\n\r\n      if (!this.selected.userName) {\r\n        this.form.get('password').setValidators([...passwordValidators, Validators.required]);\r\n        this.form.get('password').updateValueAndValidity();\r\n      }\r\n    });\r\n  }\r\n\r\n  openModal() {\r\n    this.buildForm();\r\n    this.isModalVisible = true;\r\n  }\r\n\r\n  add() {\r\n    this.selected = {} as IdentityUserDto;\r\n    this.selectedUserRoles = [] as IdentityRoleDto[];\r\n    this.openModal();\r\n  }\r\n\r\n  edit(id: string) {\r\n    this.store\r\n      .dispatch(new GetUserById(id))\r\n      .pipe(\r\n        switchMap(() => this.store.dispatch(new GetUserRoles(id))),\r\n        pluck('IdentityState'),\r\n        take(1),\r\n      )\r\n      .subscribe((state: Identity.State) => {\r\n        this.selected = state.selectedUser;\r\n        this.selectedUserRoles = state.selectedUserRoles || [];\r\n        this.openModal();\r\n      });\r\n  }\r\n\r\n  save() {\r\n    if (!this.form.valid || this.modalBusy) return;\r\n    this.modalBusy = true;\r\n\r\n    const { roleNames } = this.form.value;\r\n    const mappedRoleNames = snq(\r\n      () =>\r\n        roleNames.filter(role => !!role[Object.keys(role)[0]]).map(role => Object.keys(role)[0]),\r\n      [],\r\n    );\r\n\r\n    this.store\r\n      .dispatch(\r\n        this.selected.id\r\n          ? new UpdateUser({\r\n              ...this.selected,\r\n              ...this.form.value,\r\n              id: this.selected.id,\r\n              roleNames: mappedRoleNames,\r\n            })\r\n          : new CreateUser({\r\n              ...this.form.value,\r\n              roleNames: mappedRoleNames,\r\n            }),\r\n      )\r\n      .pipe(finalize(() => (this.modalBusy = false)))\r\n      .subscribe(() => {\r\n        this.isModalVisible = false;\r\n        this.list.get();\r\n      });\r\n  }\r\n\r\n  delete(id: string, userName: string) {\r\n    this.confirmationService\r\n      .warn('AbpIdentity::UserDeletionConfirmationMessage', 'AbpIdentity::AreYouSure', {\r\n        messageLocalizationParams: [userName],\r\n      })\r\n      .subscribe((status: Confirmation.Status) => {\r\n        if (status === Confirmation.Status.confirm) {\r\n          this.store.dispatch(new DeleteUser(id)).subscribe(() => this.list.get());\r\n        }\r\n      });\r\n  }\r\n\r\n  sort(data) {\r\n    const { prop, dir } = data.sorts[0];\r\n    this.list.sortKey = prop;\r\n    this.list.sortOrder = dir;\r\n  }\r\n\r\n  private hookToQuery() {\r\n    this.list.hookToQuery(query => this.store.dispatch(new GetUsers(query))).subscribe();\r\n  }\r\n\r\n  openPermissionsModal(providerKey: string) {\r\n    this.providerKey = providerKey;\r\n    setTimeout(() => {\r\n      this.visiblePermissions = true;\r\n    }, 0);\r\n  }\r\n}\r\n","import {\r\n  AuthGuard,\r\n  DynamicLayoutComponent,\r\n  PermissionGuard,\r\n  ReplaceableComponents,\r\n  ReplaceableRouteContainerComponent,\r\n} from '@abp/ng.core';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RolesComponent } from './components/roles/roles.component';\r\nimport { UsersComponent } from './components/users/users.component';\r\nimport { eIdentityComponents } from './enums/components';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'roles', pathMatch: 'full' },\r\n  {\r\n    path: '',\r\n    component: DynamicLayoutComponent,\r\n    canActivate: [AuthGuard, PermissionGuard],\r\n    children: [\r\n      {\r\n        path: 'roles',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpIdentity.Roles',\r\n          replaceableComponent: {\r\n            key: eIdentityComponents.Roles,\r\n            defaultComponent: RolesComponent,\r\n          } as ReplaceableComponents.RouteData<RolesComponent>,\r\n        },\r\n      },\r\n      {\r\n        path: 'users',\r\n        component: ReplaceableRouteContainerComponent,\r\n        data: {\r\n          requiredPolicy: 'AbpIdentity.Users',\r\n          replaceableComponent: {\r\n            key: eIdentityComponents.Users,\r\n            defaultComponent: UsersComponent,\r\n          } as ReplaceableComponents.RouteData<UsersComponent>,\r\n        },\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class IdentityRoutingModule {}\r\n","import { CoreModule, LazyModuleFactory } from '@abp/ng.core';\r\nimport { PermissionManagementModule } from '@abp/ng.permission-management';\r\nimport { ThemeSharedModule } from '@abp/ng.theme.shared';\r\nimport { ModuleWithProviders, NgModule, NgModuleFactory } from '@angular/core';\r\nimport { NgbDropdownModule, NgbNavModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { NgxValidateCoreModule } from '@ngx-validate/core';\r\nimport { NgxsModule } from '@ngxs/store';\r\nimport { RolesComponent } from './components/roles/roles.component';\r\nimport { UsersComponent } from './components/users/users.component';\r\nimport { IdentityRoutingModule } from './identity-routing.module';\r\nimport { IdentityState } from './states/identity.state';\r\n\r\n@NgModule({\r\n  declarations: [RolesComponent, UsersComponent],\r\n  exports: [RolesComponent, UsersComponent],\r\n  imports: [\r\n    NgxsModule.forFeature([IdentityState]),\r\n    CoreModule,\r\n    IdentityRoutingModule,\r\n    NgbNavModule,\r\n    ThemeSharedModule,\r\n    NgbDropdownModule,\r\n    PermissionManagementModule,\r\n    NgxValidateCoreModule,\r\n  ],\r\n})\r\nexport class IdentityModule {\r\n  static forChild(): ModuleWithProviders<IdentityModule> {\r\n    return {\r\n      ngModule: IdentityModule,\r\n      providers: [],\r\n    };\r\n  }\r\n\r\n  static forLazy(): NgModuleFactory<IdentityModule> {\r\n    return new LazyModuleFactory(IdentityModule.forChild());\r\n  }\r\n}\r\n","import { ABP } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport { Store } from '@ngxs/store';\r\nimport {\r\n  CreateRole,\r\n  CreateUser,\r\n  DeleteRole,\r\n  DeleteUser,\r\n  GetRoleById,\r\n  GetRoles,\r\n  GetUserById,\r\n  GetUsers,\r\n  UpdateRole,\r\n  UpdateUser,\r\n  GetUserRoles,\r\n} from '../actions/identity.actions';\r\nimport { Identity } from '../models/identity';\r\nimport { IdentityState } from '../states/identity.state';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IdentityStateService {\r\n  constructor(private store: Store) {}\r\n\r\n  getRoles() {\r\n    return this.store.selectSnapshot(IdentityState.getRoles);\r\n  }\r\n  getRolesTotalCount() {\r\n    return this.store.selectSnapshot(IdentityState.getRolesTotalCount);\r\n  }\r\n  getUsers() {\r\n    return this.store.selectSnapshot(IdentityState.getUsers);\r\n  }\r\n  getUsersTotalCount() {\r\n    return this.store.selectSnapshot(IdentityState.getUsersTotalCount);\r\n  }\r\n\r\n  dispatchGetRoles(...args: ConstructorParameters<typeof GetRoles>) {\r\n    return this.store.dispatch(new GetRoles(...args));\r\n  }\r\n\r\n  dispatchGetRoleById(...args: ConstructorParameters<typeof GetRoleById>) {\r\n    return this.store.dispatch(new GetRoleById(...args));\r\n  }\r\n\r\n  dispatchDeleteRole(...args: ConstructorParameters<typeof DeleteRole>) {\r\n    return this.store.dispatch(new DeleteRole(...args));\r\n  }\r\n\r\n  dispatchCreateRole(...args: ConstructorParameters<typeof CreateRole>) {\r\n    return this.store.dispatch(new CreateRole(...args));\r\n  }\r\n\r\n  dispatchUpdateRole(...args: ConstructorParameters<typeof UpdateRole>) {\r\n    return this.store.dispatch(new UpdateRole(...args));\r\n  }\r\n\r\n  dispatchGetUsers(...args: ConstructorParameters<typeof GetUsers>) {\r\n    return this.store.dispatch(new GetUsers(...args));\r\n  }\r\n\r\n  dispatchGetUserById(...args: ConstructorParameters<typeof GetUserById>) {\r\n    return this.store.dispatch(new GetUserById(...args));\r\n  }\r\n\r\n  dispatchDeleteUser(...args: ConstructorParameters<typeof DeleteUser>) {\r\n    return this.store.dispatch(new DeleteUser(...args));\r\n  }\r\n\r\n  dispatchCreateUser(...args: ConstructorParameters<typeof CreateUser>) {\r\n    return this.store.dispatch(new CreateUser(...args));\r\n  }\r\n\r\n  dispatchUpdateUser(...args: ConstructorParameters<typeof UpdateUser>) {\r\n    return this.store.dispatch(new UpdateUser(...args));\r\n  }\r\n\r\n  dispatchGetUserRoles(...args: ConstructorParameters<typeof GetUserRoles>) {\r\n    return this.store.dispatch(new GetUserRoles(...args));\r\n  }\r\n}\r\n","import type { UserLookupCountInputDto, UserLookupSearchInputDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport type { ListResultDto } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\nimport type { UserData } from '../users/models';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class IdentityUserLookupService {\r\n  apiName = 'AbpIdentity';\r\n\r\n  findById = (id: string) =>\r\n    this.restService.request<any, UserData>({\r\n      method: 'GET',\r\n      url: `/api/identity/users/lookup/${id}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  findByUserName = (userName: string) =>\r\n    this.restService.request<any, UserData>({\r\n      method: 'GET',\r\n      url: `/api/identity/users/lookup/by-username/${userName}`,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  getCount = (input: UserLookupCountInputDto) =>\r\n    this.restService.request<any, number>({\r\n      method: 'GET',\r\n      url: '/api/identity/users/lookup/count',\r\n      params: { filter: input.filter },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  search = (input: UserLookupSearchInputDto) =>\r\n    this.restService.request<any, ListResultDto<UserData>>({\r\n      method: 'GET',\r\n      url: '/api/identity/users/lookup/search',\r\n      params: { filter: input.filter, sorting: input.sorting, skipCount: input.skipCount, maxResultCount: input.maxResultCount },\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","import type { ChangePasswordInput, ProfileDto, UpdateProfileDto } from './models';\r\nimport { RestService } from '@abp/ng.core';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ProfileService {\r\n  apiName = 'AbpIdentity';\r\n\r\n  changePassword = (input: ChangePasswordInput) =>\r\n    this.restService.request<any, void>({\r\n      method: 'POST',\r\n      url: '/api/identity/my-profile/change-password',\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  get = () =>\r\n    this.restService.request<any, ProfileDto>({\r\n      method: 'GET',\r\n      url: '/api/identity/my-profile',\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  update = (input: UpdateProfileDto) =>\r\n    this.restService.request<any, ProfileDto>({\r\n      method: 'PUT',\r\n      url: '/api/identity/my-profile',\r\n      body: input,\r\n    },\r\n    { apiName: this.apiName });\r\n\r\n  constructor(private restService: RestService) {}\r\n}\r\n","/*\r\n * Public API Surface of identity\r\n */\r\n\r\nexport * from './lib/identity.module';\r\nexport * from './lib/actions/identity.actions';\r\nexport * from './lib/enums';\r\nexport * from './lib/components';\r\nexport * from './lib/models/identity';\r\nexport * from './lib/services';\r\nexport * from './lib/states/identity.state';\r\nexport * from './lib/proxy/identity';\r\nexport * from './lib/proxy/users';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {RolesComponent as ɵa} from './lib/components/roles/roles.component';\nexport {UsersComponent as ɵg} from './lib/components/users/users.component';\nexport {eIdentityComponents as ɵj} from './lib/enums/components';\nexport {IdentityRoutingModule as ɵi} from './lib/identity-routing.module';\nexport {IdentityRoleService as ɵc} from './lib/proxy/identity/identity-role.service';\nexport {IdentityUserService as ɵb} from './lib/proxy/identity/identity-user.service';\nexport {GetIdentityUsersInput as ɵd,IdentityRoleCreateDto as ɵe,IdentityUserCreateDto as ɵf} from './lib/proxy/identity/models';\nexport {IdentityService as ɵh} from './lib/services/identity.service';"],"names":[],"mappings":"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"}