!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.permission-management"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("@ngxs/store"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/router")):"function"==typeof define&&define.amd?define("@abp/ng.identity",["exports","@abp/ng.core","@abp/ng.permission-management","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","@ngxs/store","@angular/forms","rxjs","rxjs/operators","snq","@angular/router"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.identity={}),e.i1,e.ng_permissionManagement,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.core,e.i1$1,e.ng.forms,e.rxjs,e.rxjs.operators,e.snq,e.ng.router)}(this,(function(e,t,n,r,o,i,a,s,l,p,d,c,u){"use strict";function b(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var m=b(c);
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function y(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function f(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function g(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function h(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}var v=function(e){this.payload=e};v.type="[Identity] Get Roles";var I=function(e){this.payload=e};I.type="[Identity] Get Role By Id";var S=function(e){this.payload=e};S.type="[Identity] Delete Role";var R=function(e){this.payload=e};R.type="[Identity] Create Role";var w=function(e){this.payload=e};w.type="[Identity] Update Role";var N=function(e){this.payload=e};N.type="[Identity] Get Users";var U=function(e){this.payload=e};U.type="[Identity] Get User By Id";var C=function(e){this.payload=e};C.type="[Identity] Delete User";var A=function(e){this.payload=e};A.type="[Identity] Create User";var x=function(e){this.payload=e};x.type="[Identity] Update User";var P=function(e){this.payload=e};P.type="[Identity] Get User Roles",e.ɵb=function(){function e(e){this.rest=e,this.apiName="AbpIdentity"}return e.prototype.getRoles=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/identity/roles",params:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getAllRoles=function(){return this.rest.request({method:"GET",url:"/api/identity/roles/all"},{apiName:this.apiName})},e.prototype.getRoleById=function(e){var t={method:"GET",url:"/api/identity/roles/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.deleteRole=function(e){var t={method:"DELETE",url:"/api/identity/roles/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.createRole=function(e){var t={method:"POST",url:"/api/identity/roles",body:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.updateRole=function(e){var t="/api/identity/roles/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n,{apiName:this.apiName})},e.prototype.getUsers=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/identity/users",params:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getUserById=function(e){var t={method:"GET",url:"/api/identity/users/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getUserRoles=function(e){var t={method:"GET",url:"/api/identity/users/"+e+"/roles"};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getUserAssingableRoles=function(){return this.rest.request({method:"GET",url:"/api/identity/users/assignable-roles"},{apiName:this.apiName})},e.prototype.deleteUser=function(e){var t={method:"DELETE",url:"/api/identity/users/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.createUser=function(e){var t={method:"POST",url:"/api/identity/users",body:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.updateUser=function(e){var t="/api/identity/users/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n,{apiName:this.apiName})},e}(),e.ɵb.ɵprov=o.ɵɵdefineInjectable({factory:function(){return new e.ɵb(o.ɵɵinject(t.RestService))},token:e.ɵb,providedIn:"root"}),e.ɵb=y([o.Injectable({providedIn:"root"}),f("design:paramtypes",[t.RestService])],e.ɵb),e.IdentityState=function(){function e(e){this.identityService=e}return e.getRoles=function(e){return e.roles.items||[]},e.getRolesTotalCount=function(e){return e.roles.totalCount||0},e.getUsers=function(e){return e.users.items||[]},e.getUsersTotalCount=function(e){return e.users.totalCount||0},e.prototype.getRoles=function(e,t){var n=e.patchState,r=t.payload;return this.identityService.getRoles(r).pipe(d.tap((function(e){return n({roles:e})})))},e.prototype.getRole=function(e,t){var n=e.patchState,r=t.payload;return this.identityService.getRoleById(r).pipe(d.tap((function(e){return n({selectedRole:e})})))},e.prototype.deleteRole=function(e,t){var n=t.payload;return this.identityService.deleteRole(n)},e.prototype.addRole=function(e,t){var n=t.payload;return this.identityService.createRole(n)},e.prototype.updateRole=function(e,t){var n=e.getState,r=t.payload;return this.identityService.updateRole(Object.assign(Object.assign({},n().selectedRole),r))},e.prototype.getUsers=function(e,t){var n=e.patchState,r=t.payload;return this.identityService.getUsers(r).pipe(d.tap((function(e){return n({users:e})})))},e.prototype.getUser=function(e,t){var n=e.patchState,r=t.payload;return this.identityService.getUserById(r).pipe(d.tap((function(e){return n({selectedUser:e})})))},e.prototype.deleteUser=function(e,t){var n=t.payload;return this.identityService.deleteUser(n)},e.prototype.addUser=function(e,t){var n=t.payload;return this.identityService.createUser(n)},e.prototype.updateUser=function(e,t){var n=e.getState,r=t.payload;return this.identityService.updateUser(Object.assign(Object.assign({},n().selectedUser),r))},e.prototype.getUserRoles=function(e,t){var n=e.patchState,r=t.payload;return this.identityService.getUserRoles(r).pipe(d.pluck("items"),d.tap((function(e){return n({selectedUserRoles:e})})))},e}(),y([s.Action(v),f("design:type",Function),f("design:paramtypes",[Object,v]),f("design:returntype",void 0)],e.IdentityState.prototype,"getRoles",null),y([s.Action(I),f("design:type",Function),f("design:paramtypes",[Object,I]),f("design:returntype",void 0)],e.IdentityState.prototype,"getRole",null),y([s.Action(S),f("design:type",Function),f("design:paramtypes",[Object,I]),f("design:returntype",void 0)],e.IdentityState.prototype,"deleteRole",null),y([s.Action(R),f("design:type",Function),f("design:paramtypes",[Object,R]),f("design:returntype",void 0)],e.IdentityState.prototype,"addRole",null),y([s.Action(w),f("design:type",Function),f("design:paramtypes",[Object,w]),f("design:returntype",void 0)],e.IdentityState.prototype,"updateRole",null),y([s.Action(N),f("design:type",Function),f("design:paramtypes",[Object,N]),f("design:returntype",void 0)],e.IdentityState.prototype,"getUsers",null),y([s.Action(U),f("design:type",Function),f("design:paramtypes",[Object,U]),f("design:returntype",void 0)],e.IdentityState.prototype,"getUser",null),y([s.Action(C),f("design:type",Function),f("design:paramtypes",[Object,U]),f("design:returntype",void 0)],e.IdentityState.prototype,"deleteUser",null),y([s.Action(A),f("design:type",Function),f("design:paramtypes",[Object,A]),f("design:returntype",void 0)],e.IdentityState.prototype,"addUser",null),y([s.Action(x),f("design:type",Function),f("design:paramtypes",[Object,x]),f("design:returntype",void 0)],e.IdentityState.prototype,"updateUser",null),y([s.Action(P),f("design:type",Function),f("design:paramtypes",[Object,P]),f("design:returntype",void 0)],e.IdentityState.prototype,"getUserRoles",null),y([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Array)],e.IdentityState,"getRoles",null),y([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Number)],e.IdentityState,"getRolesTotalCount",null),y([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Array)],e.IdentityState,"getUsers",null),y([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Number)],e.IdentityState,"getUsersTotalCount",null),e.IdentityState=y([s.State({name:"IdentityState",defaults:{roles:{},selectedRole:{},users:{},selectedUser:{}}}),o.Injectable(),f("design:paramtypes",[e.ɵb])],e.IdentityState),e.ɵa=function(){function e(e,t,n,r){var o=this;this.list=e,this.confirmationService=t,this.fb=n,this.store=r,this.visiblePermissions=!1,this.modalBusy=!1,this.permissionManagementKey="PermissionManagement.PermissionManagementComponent",this.onVisiblePermissionChange=function(e){o.visiblePermissions=e}}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.buildForm=function(){this.form=this.fb.group({name:new l.FormControl({value:this.selected.name||"",disabled:this.selected.isStatic},[l.Validators.required,l.Validators.maxLength(256)]),isDefault:[this.selected.isDefault||!1],isPublic:[this.selected.isPublic||!1]})},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new I(e)).pipe(d.pluck("IdentityState","selectedRole")).subscribe((function(e){t.selected=e,t.openModal()}))},e.prototype.save=function(){var e=this;this.form.valid&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new w(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id})):new R(this.form.value)).pipe(d.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.list.get()})))},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentity::RoleDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===r.Confirmation.Status.confirm&&n.store.dispatch(new S(e)).subscribe((function(){return n.list.get()}))}))},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new v(t))})).subscribe()},e.prototype.onClickSaveButton=function(){this.formRef.nativeElement.dispatchEvent(new Event("submit",{bubbles:!0,cancelable:!0}))},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e.prototype.sort=function(e){var t=e.sorts[0],n=t.prop,r=t.dir;this.list.sortKey=n,this.list.sortOrder=r},e}(),y([s.Select(e.IdentityState.getRoles),f("design:type",p.Observable)],e.ɵa.prototype,"data$",void 0),y([s.Select(e.IdentityState.getRolesTotalCount),f("design:type",p.Observable)],e.ɵa.prototype,"totalCount$",void 0),y([o.ViewChild("formRef",{static:!1,read:o.ElementRef}),f("design:type",o.ElementRef)],e.ɵa.prototype,"formRef",void 0),e.ɵa=y([o.Component({selector:"abp-roles",template:'<div id="identity-roles-wrapper" class="card">\r\n  <div class="card-header">\r\n    <div class="row">\r\n      <div class="col col-md-6">\r\n        <h5 class="card-title">{{ \'AbpIdentity::Roles\' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class="text-right col col-md-6">\r\n        <button\r\n          *abpPermission="\'AbpIdentity.Roles.Create\'"\r\n          id="create-role"\r\n          class="btn btn-primary"\r\n          type="button"\r\n          (click)="add()"\r\n        >\r\n          <i class="fa fa-plus mr-1"></i>\r\n          <span>{{ \'AbpIdentity::NewRole\' | abpLocalization }}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="card-body">\r\n    <ngx-datatable [rows]="data$ | async" [count]="totalCount$ | async" [list]="list" default>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpIdentity::Actions\' | abpLocalization"\r\n        [maxWidth]="150"\r\n        [sortable]="false"\r\n      >\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          <div ngbDropdown container="body" class="d-inline-block">\r\n            <button\r\n              class="btn btn-primary btn-sm dropdown-toggle"\r\n              data-toggle="dropdown"\r\n              aria-haspopup="true"\r\n              ngbDropdownToggle\r\n            >\r\n              <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\r\n            </button>\r\n            <div ngbDropdownMenu>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Roles.Update\'"\r\n                ngbDropdownItem\r\n                (click)="edit(row.id)"\r\n              >\r\n                {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Roles.ManagePermissions\'"\r\n                ngbDropdownItem\r\n                (click)="openPermissionsModal(row.name)"\r\n              >\r\n                {{ \'AbpIdentity::Permissions\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *ngIf="!row.isStatic"\r\n                [abpPermission]="\'AbpIdentity.Roles.Delete\'"\r\n                ngbDropdownItem\r\n                (click)="delete(row.id, row.name)"\r\n              >\r\n                {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpIdentity::RoleName\' | abpLocalization"\r\n        prop="name"\r\n      ></ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewRole\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form #formRef [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <div class="form-group">\r\n        <label for="role-name">{{ \'AbpIdentity::RoleName\' | abpLocalization }}</label\r\n        ><span> * </span>\r\n        <input autofocus type="text" id="role-name" class="form-control" formControlName="name" />\r\n      </div>\r\n\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="role-is-default"\r\n          class="custom-control-input"\r\n          formControlName="isDefault"\r\n        />\r\n        <label class="custom-control-label" for="role-is-default">{{\r\n          \'AbpIdentity::DisplayName:IsDefault\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="role-is-public"\r\n          class="custom-control-input"\r\n          formControlName="isPublic"\r\n        />\r\n        <label class="custom-control-label" for="role-is-public">{{\r\n          \'AbpIdentity::DisplayName:IsPublic\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" [disabled]="form?.invalid" (click)="onClickSaveButton()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement="abpPermissionManagement"\r\n  *abpReplaceableTemplate="\r\n    {\r\n      inputs: {\r\n        providerName: { value: \'R\' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true },\r\n        hideBadges: { value: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  "\r\n  (abpInit)="init(abpPermissionManagement)"\r\n>\r\n</abp-permission-management>\r\n',providers:[t.ListService]}),f("design:paramtypes",[t.ListService,r.ConfirmationService,l.FormBuilder,s.Store])],e.ɵa),e.ɵd=function(){function e(e,t,n,r,o){var i=this;this.list=e,this.confirmationService=t,this.fb=n,this.store=r,this.identityService=o,this.visiblePermissions=!1,this.modalBusy=!1,this.permissionManagementKey="PermissionManagement.PermissionManagementComponent",this.trackByFn=function(e,t){return Object.keys(t)[0]||e},this.onVisiblePermissionChange=function(e){i.visiblePermissions=e}}return Object.defineProperty(e.prototype,"roleGroups",{get:function(){var e=this;return m.default((function(){return e.form.get("roleNames").controls}),[])},enumerable:!0,configurable:!0}),e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.buildForm=function(){var e=this;this.identityService.getUserAssingableRoles().subscribe((function(t){var n=t.items;e.roles=n,e.form=e.fb.group({userName:[e.selected.userName||"",[l.Validators.required,l.Validators.maxLength(256)]],email:[e.selected.email||"",[l.Validators.required,l.Validators.email,l.Validators.maxLength(256)]],name:[e.selected.name||"",[l.Validators.maxLength(64)]],surname:[e.selected.surname||"",[l.Validators.maxLength(64)]],phoneNumber:[e.selected.phoneNumber||"",[l.Validators.maxLength(16)]],lockoutEnabled:[e.selected.lockoutEnabled||!e.selected.id],twoFactorEnabled:[e.selected.twoFactorEnabled||!e.selected.id],roleNames:e.fb.array(e.roles.map((function(t){var n;return e.fb.group(((n={})[t.name]=[e.selected.id?!!m.default((function(){return e.selectedUserRoles.find((function(e){return e.id===t.id}))})):t.isDefault],n))})))});var o=r.getPasswordValidators(e.store);e.form.addControl("password",new l.FormControl("",h(o))),e.selected.userName||(e.form.get("password").setValidators(h(o,[l.Validators.required])),e.form.get("password").updateValueAndValidity())}))},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.selectedUserRoles=[],this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new U(e)).pipe(d.switchMap((function(){return t.store.dispatch(new P(e))})),d.pluck("IdentityState"),d.take(1)).subscribe((function(e){t.selected=e.selectedUser,t.selectedUserRoles=e.selectedUserRoles||[],t.openModal()}))},e.prototype.save=function(){var e=this;if(this.form.valid&&!this.modalBusy){this.modalBusy=!0;var t=this.form.value.roleNames,n=m.default((function(){return t.filter((function(e){return!!e[Object.keys(e)[0]]})).map((function(e){return Object.keys(e)[0]}))}),[]);this.store.dispatch(this.selected.id?new x(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id,roleNames:n})):new A(Object.assign(Object.assign({},this.form.value),{roleNames:n}))).pipe(d.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.list.get()}))}},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentity::UserDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===r.Confirmation.Status.confirm&&n.store.dispatch(new C(e)).subscribe((function(){return n.list.get()}))}))},e.prototype.sort=function(e){var t=e.sorts[0],n=t.prop,r=t.dir;this.list.sortKey=n,this.list.sortOrder=r},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new N(t))})).subscribe()},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e}(),y([s.Select(e.IdentityState.getUsers),f("design:type",p.Observable)],e.ɵd.prototype,"data$",void 0),y([s.Select(e.IdentityState.getUsersTotalCount),f("design:type",p.Observable)],e.ɵd.prototype,"totalCount$",void 0),y([o.ViewChild("modalContent",{static:!1}),f("design:type",o.TemplateRef)],e.ɵd.prototype,"modalContent",void 0),e.ɵd=y([o.Component({selector:"abp-users",template:'<div id="identity-roles-wrapper" class="card">\r\n  <div class="card-header">\r\n    <div class="row">\r\n      <div class="col col-md-6">\r\n        <h5 class="card-title">{{ \'AbpIdentity::Users\' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class="text-right col col-md-6">\r\n        <button\r\n          *abpPermission="\'AbpIdentity.Users.Create\'"\r\n          id="create-role"\r\n          class="btn btn-primary"\r\n          type="button"\r\n          (click)="add()"\r\n        >\r\n          <i class="fa fa-plus mr-1"></i>\r\n          <span>{{ \'AbpIdentity::NewUser\' | abpLocalization }}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="card-body">\r\n    <div id="data-tables-table-filter" class="data-tables-filter">\r\n      <div class="input-group">\r\n        <input\r\n          type="search"\r\n          class="form-control"\r\n          [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n          [(ngModel)]="list.filter"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <ngx-datatable [rows]="data$ | async" [count]="totalCount$ | async" [list]="list" default>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpIdentity::Actions\' | abpLocalization"\r\n        [maxWidth]="150"\r\n        [sortable]="false"\r\n      >\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          <div ngbDropdown container="body" class="d-inline-block">\r\n            <button\r\n              class="btn btn-primary btn-sm dropdown-toggle"\r\n              data-toggle="dropdown"\r\n              aria-haspopup="true"\r\n              ngbDropdownToggle\r\n            >\r\n              <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\r\n            </button>\r\n            <div ngbDropdownMenu>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Users.Update\'"\r\n                ngbDropdownItem\r\n                (click)="edit(row.id)"\r\n              >\r\n                {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Users.ManagePermissions\'"\r\n                ngbDropdownItem\r\n                (click)="openPermissionsModal(row.id)"\r\n              >\r\n                {{ \'AbpIdentity::Permissions\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Users.Delete\'"\r\n                ngbDropdownItem\r\n                (click)="delete(row.id, row.userName)"\r\n              >\r\n                {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [width]="200"\r\n        [name]="\'AbpIdentity::UserName\' | abpLocalization"\r\n        prop="userName"\r\n      ></ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [width]="200"\r\n        [name]="\'AbpIdentity::EmailAddress\' | abpLocalization"\r\n        prop="email"\r\n      ></ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [width]="200"\r\n        [name]="\'AbpIdentity::PhoneNumber\' | abpLocalization"\r\n        prop="phoneNumber"\r\n      ></ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="modalBusy" (disappear)="form = null">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewUser\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <ng-template #loaderRef\r\n      ><div class="text-center"><i class="fa fa-pulse fa-spinner"></i></div\r\n    ></ng-template>\r\n\r\n    <form *ngIf="form; else loaderRef" [formGroup]="form" (ngSubmit)="save()">\r\n      <ul ngbNav #nav="ngbNav" class="nav-tabs">\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::UserInformations\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div class="form-group">\r\n              <label for="user-name">{{ \'AbpIdentity::UserName\' | abpLocalization }}</label\r\n              ><span> * </span>\r\n              <input\r\n                type="text"\r\n                id="user-name"\r\n                class="form-control"\r\n                formControlName="userName"\r\n                autofocus\r\n              />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label>\r\n              <input type="text" id="name" class="form-control" formControlName="name" />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="surname">{{\r\n                \'AbpIdentity::DisplayName:Surname\' | abpLocalization\r\n              }}</label>\r\n              <input type="text" id="surname" class="form-control" formControlName="surname" />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="password">{{ \'AbpIdentity::Password\' | abpLocalization }}</label\r\n              ><span *ngIf="!selected.userName"> * </span>\r\n              <input\r\n                type="password"\r\n                id="password"\r\n                autocomplete="new-password"\r\n                class="form-control"\r\n                formControlName="password"\r\n              />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="email">{{ \'AbpIdentity::EmailAddress\' | abpLocalization }}</label\r\n              ><span> * </span>\r\n              <input type="text" id="email" class="form-control" formControlName="email" />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="phone-number">{{ \'AbpIdentity::PhoneNumber\' | abpLocalization }}</label>\r\n              <input\r\n                type="text"\r\n                id="phone-number"\r\n                class="form-control"\r\n                formControlName="phoneNumber"\r\n              />\r\n            </div>\r\n\r\n            <div class="custom-checkbox custom-control mb-2">\r\n              <input\r\n                type="checkbox"\r\n                id="lockout-checkbox"\r\n                class="custom-control-input"\r\n                formControlName="lockoutEnabled"\r\n              />\r\n              <label class="custom-control-label" for="lockout-checkbox">{{\r\n                \'AbpIdentity::DisplayName:LockoutEnabled\' | abpLocalization\r\n              }}</label>\r\n            </div>\r\n\r\n            <div class="custom-checkbox custom-control mb-2">\r\n              <input\r\n                type="checkbox"\r\n                id="two-factor-checkbox"\r\n                class="custom-control-input"\r\n                formControlName="twoFactorEnabled"\r\n              />\r\n              <label class="custom-control-label" for="two-factor-checkbox">{{\r\n                \'AbpIdentity::DisplayName:TwoFactorEnabled\' | abpLocalization\r\n              }}</label>\r\n            </div>\r\n          </ng-template>\r\n        </li>\r\n\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::Roles\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div\r\n              *ngFor="let roleGroup of roleGroups; let i = index; trackBy: trackByFn"\r\n              class="custom-checkbox custom-control mb-2"\r\n            >\r\n              <input\r\n                type="checkbox"\r\n                class="custom-control-input"\r\n                [attr.id]="\'roles-\' + i"\r\n                [formControl]="roleGroup.controls[roles[i].name]"\r\n              />\r\n              <label class="custom-control-label" [attr.for]="\'roles-\' + i">{{\r\n                roles[i].name\r\n              }}</label>\r\n            </div>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n\r\n      <div class="mt-2 fade-in-top" [ngbNavOutlet]="nav"></div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="form?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement="abpPermissionManagement"\r\n  *abpReplaceableTemplate="\r\n    {\r\n      inputs: {\r\n        providerName: { value: \'U\' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  "\r\n  (abpInit)="init(abpPermissionManagement)"\r\n>\r\n</abp-permission-management>\r\n',providers:[t.ListService]}),f("design:paramtypes",[t.ListService,r.ConfirmationService,l.FormBuilder,s.Store,e.ɵb])],e.ɵd);var k,L={requiredPolicy:"AbpIdentity.Roles",replaceableComponent:{key:"Identity.RolesComponent",defaultComponent:e.ɵa}},M={requiredPolicy:"AbpIdentity.Users",replaceableComponent:{key:"Identity.UsersComponent",defaultComponent:e.ɵd}},j=[{path:"",redirectTo:"roles",pathMatch:"full"},{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard],children:[{path:"roles",component:t.ReplaceableRouteContainerComponent,data:L},{path:"users",component:t.ReplaceableRouteContainerComponent,data:M}]}];e.ɵe=function(){},e.ɵe=y([o.NgModule({imports:[u.RouterModule.forChild(j)],exports:[u.RouterModule]})],e.ɵe),e.IdentityModule=k=function(){function e(){}return e.forChild=function(){return{ngModule:k,providers:[]}},e.forLazy=function(){return new t.LazyModuleFactory(k.forChild())},e}(),e.IdentityModule=k=y([o.NgModule({declarations:[e.ɵa,e.ɵd],exports:[e.ɵa,e.ɵd],imports:[s.NgxsModule.forFeature([e.IdentityState]),t.CoreModule,e.ɵe,i.NgbNavModule,r.ThemeSharedModule,i.NgbDropdownModule,n.PermissionManagementModule,a.NgxValidateCoreModule]})],e.IdentityModule),e.IdentityStateService=function(){function t(e){this.store=e}return t.prototype.getRoles=function(){return this.store.selectSnapshot(e.IdentityState.getRoles)},t.prototype.getRolesTotalCount=function(){return this.store.selectSnapshot(e.IdentityState.getRolesTotalCount)},t.prototype.getUsers=function(){return this.store.selectSnapshot(e.IdentityState.getUsers)},t.prototype.getUsersTotalCount=function(){return this.store.selectSnapshot(e.IdentityState.getUsersTotalCount)},t.prototype.dispatchGetRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(v.bind.apply(v,h([void 0],e))))},t.prototype.dispatchGetRoleById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(I.bind.apply(I,h([void 0],e))))},t.prototype.dispatchDeleteRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(S.bind.apply(S,h([void 0],e))))},t.prototype.dispatchCreateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(R.bind.apply(R,h([void 0],e))))},t.prototype.dispatchUpdateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(w.bind.apply(w,h([void 0],e))))},t.prototype.dispatchGetUsers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(N.bind.apply(N,h([void 0],e))))},t.prototype.dispatchGetUserById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(U.bind.apply(U,h([void 0],e))))},t.prototype.dispatchDeleteUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(C.bind.apply(C,h([void 0],e))))},t.prototype.dispatchCreateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(A.bind.apply(A,h([void 0],e))))},t.prototype.dispatchUpdateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(x.bind.apply(x,h([void 0],e))))},t.prototype.dispatchGetUserRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(P.bind.apply(P,h([void 0],e))))},t}(),e.IdentityStateService.ɵprov=o.ɵɵdefineInjectable({factory:function(){return new e.IdentityStateService(o.ɵɵinject(s.Store))},token:e.IdentityStateService,providedIn:"root"}),e.IdentityStateService=y([o.Injectable({providedIn:"root"}),f("design:paramtypes",[s.Store])],e.IdentityStateService),e.CreateRole=R,e.CreateUser=A,e.DeleteRole=S,e.DeleteUser=C,e.GetRoleById=I,e.GetRoles=v,e.GetUserById=U,e.GetUserRoles=P,e.GetUsers=N,e.IdentityService=e.ɵb,e.RolesComponent=e.ɵa,e.UpdateRole=w,e.UpdateUser=x,e.UsersComponent=e.ɵd,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.identity.umd.min.js.map