!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@abp/ng.core"),require("@abp/ng.permission-management"),require("@abp/ng.theme.shared"),require("@angular/core"),require("@ng-bootstrap/ng-bootstrap"),require("@ngx-validate/core"),require("@ngxs/store"),require("@angular/forms"),require("rxjs"),require("rxjs/operators"),require("snq"),require("@angular/router")):"function"==typeof define&&define.amd?define("@abp/ng.identity",["exports","@abp/ng.core","@abp/ng.permission-management","@abp/ng.theme.shared","@angular/core","@ng-bootstrap/ng-bootstrap","@ngx-validate/core","@ngxs/store","@angular/forms","rxjs","rxjs/operators","snq","@angular/router"],t):t(((e="undefined"!=typeof globalThis?globalThis:e||self).abp=e.abp||{},e.abp.ng=e.abp.ng||{},e.abp.ng.identity={}),e.i1,e.ng_permissionManagement,e.ng_theme_shared,e.ng.core,e.ngBootstrap,e.core,e.i1$1,e.ng.forms,e.rxjs,e.rxjs.operators,e.snq,e.ng.router)}(this,(function(e,t,n,r,i,o,a,s,l,p,d,u,c){"use strict";function m(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var y=m(u);
/*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */function b(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function f(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}Object.create;function h(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e}Object.create;var v=function(e){this.payload=e};v.type="[Identity] Get Roles";var I=function(e){this.payload=e};I.type="[Identity] Get Role By Id";var S=function(e){this.payload=e};S.type="[Identity] Delete Role";var N=function(e){this.payload=e};N.type="[Identity] Create Role";var R=function(e){this.payload=e};R.type="[Identity] Update Role";var w=function(e){this.payload=e};w.type="[Identity] Get Users";var C=function(e){this.payload=e};C.type="[Identity] Get User By Id";var U=function(e){this.payload=e};U.type="[Identity] Delete User";var A=function(e){this.payload=e};A.type="[Identity] Create User";var P=function(e){this.payload=e};P.type="[Identity] Update User";var x=function(e){this.payload=e};x.type="[Identity] Get User Roles";var k=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/roles",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/roles/"+e},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/roles/"+e},{apiName:t.apiName})},this.getAllList=function(){return t.restService.request({method:"GET",url:"/api/identity/roles/all"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/roles",params:{sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/roles/"+e,body:n},{apiName:t.apiName})}};k.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new k(i.ɵɵinject(t.RestService))},token:k,providedIn:"root"}),k.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],k.ctorParameters=function(){return[{type:t.RestService}]};var L=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.create=function(e){return t.restService.request({method:"POST",url:"/api/identity/users",body:e},{apiName:t.apiName})},this.delete=function(e){return t.restService.request({method:"DELETE",url:"/api/identity/users/"+e},{apiName:t.apiName})},this.findByEmail=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/by-email/"+e},{apiName:t.apiName})},this.findByUsername=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/by-username/{userName}"},{apiName:t.apiName})},this.get=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e},{apiName:t.apiName})},this.getAssignableRoles=function(){return t.restService.request({method:"GET",url:"/api/identity/users/assignable-roles"},{apiName:t.apiName})},this.getList=function(e){return t.restService.request({method:"GET",url:"/api/identity/users",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})},this.getRoles=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/"+e+"/roles"},{apiName:t.apiName})},this.update=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e,body:n},{apiName:t.apiName})},this.updateRoles=function(e,n){return t.restService.request({method:"PUT",url:"/api/identity/users/"+e+"/roles",body:n},{apiName:t.apiName})}};L.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new L(i.ɵɵinject(t.RestService))},token:L,providedIn:"root"}),L.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],L.ctorParameters=function(){return[{type:t.RestService}]},e.IdentityState=function(){function e(e,t){this.identityUserService=e,this.identityRoleService=t}return e.getRoles=function(e){return e.roles.items||[]},e.getRolesTotalCount=function(e){return e.roles.totalCount||0},e.getUsers=function(e){return e.users.items||[]},e.getUsersTotalCount=function(e){return e.users.totalCount||0},e.prototype.getRoles=function(e,t){var n=e.patchState,r=t.payload;return this.identityRoleService.getList(r).pipe(d.tap((function(e){return n({roles:e})})))},e.prototype.getRole=function(e,t){var n=e.patchState,r=t.payload;return this.identityRoleService.get(r).pipe(d.tap((function(e){return n({selectedRole:e})})))},e.prototype.deleteRole=function(e,t){var n=t.payload;return this.identityRoleService.delete(n)},e.prototype.addRole=function(e,t){var n=t.payload;return this.identityRoleService.create(n)},e.prototype.updateRole=function(e,t){var n=e.getState,r=t.payload;return this.identityRoleService.update(r.id,Object.assign(Object.assign({},n().selectedRole),r))},e.prototype.getUsers=function(e,t){var n=e.patchState,r=t.payload;return this.identityUserService.getList(r).pipe(d.tap((function(e){return n({users:e})})))},e.prototype.getUser=function(e,t){var n=e.patchState,r=t.payload;return this.identityUserService.get(r).pipe(d.tap((function(e){return n({selectedUser:e})})))},e.prototype.deleteUser=function(e,t){var n=t.payload;return this.identityUserService.delete(n)},e.prototype.addUser=function(e,t){var n=t.payload;return this.identityUserService.create(n)},e.prototype.updateUser=function(e,t){var n=e.getState,r=t.payload;return this.identityUserService.update(r.id,Object.assign(Object.assign({},n().selectedUser),r))},e.prototype.getUserRoles=function(e,t){var n=e.patchState,r=t.payload;return this.identityUserService.getRoles(r).pipe(d.pluck("items"),d.tap((function(e){return n({selectedUserRoles:e})})))},e}(),e.IdentityState.decorators=[{type:i.Injectable}],e.IdentityState.ctorParameters=function(){return[{type:L},{type:k}]},b([s.Action(v),f("design:type",Function),f("design:paramtypes",[Object,v]),f("design:returntype",void 0)],e.IdentityState.prototype,"getRoles",null),b([s.Action(I),f("design:type",Function),f("design:paramtypes",[Object,I]),f("design:returntype",void 0)],e.IdentityState.prototype,"getRole",null),b([s.Action(S),f("design:type",Function),f("design:paramtypes",[Object,I]),f("design:returntype",void 0)],e.IdentityState.prototype,"deleteRole",null),b([s.Action(N),f("design:type",Function),f("design:paramtypes",[Object,N]),f("design:returntype",void 0)],e.IdentityState.prototype,"addRole",null),b([s.Action(R),f("design:type",Function),f("design:paramtypes",[Object,R]),f("design:returntype",void 0)],e.IdentityState.prototype,"updateRole",null),b([s.Action(w),f("design:type",Function),f("design:paramtypes",[Object,w]),f("design:returntype",void 0)],e.IdentityState.prototype,"getUsers",null),b([s.Action(C),f("design:type",Function),f("design:paramtypes",[Object,C]),f("design:returntype",void 0)],e.IdentityState.prototype,"getUser",null),b([s.Action(U),f("design:type",Function),f("design:paramtypes",[Object,C]),f("design:returntype",void 0)],e.IdentityState.prototype,"deleteUser",null),b([s.Action(A),f("design:type",Function),f("design:paramtypes",[Object,A]),f("design:returntype",void 0)],e.IdentityState.prototype,"addUser",null),b([s.Action(P),f("design:type",Function),f("design:paramtypes",[Object,P]),f("design:returntype",void 0)],e.IdentityState.prototype,"updateUser",null),b([s.Action(x),f("design:type",Function),f("design:paramtypes",[Object,x]),f("design:returntype",void 0)],e.IdentityState.prototype,"getUserRoles",null),b([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Array)],e.IdentityState,"getRoles",null),b([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Number)],e.IdentityState,"getRolesTotalCount",null),b([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Array)],e.IdentityState,"getUsers",null),b([s.Selector(),f("design:type",Function),f("design:paramtypes",[Object]),f("design:returntype",Number)],e.IdentityState,"getUsersTotalCount",null),e.IdentityState=b([s.State({name:"IdentityState",defaults:{roles:{},selectedRole:{},users:{},selectedUser:{}}}),f("design:paramtypes",[L,k])],e.IdentityState);var j=function(){function e(e,t,n,r){var i=this;this.list=e,this.confirmationService=t,this.fb=n,this.store=r,this.visiblePermissions=!1,this.modalBusy=!1,this.permissionManagementKey="PermissionManagement.PermissionManagementComponent",this.onVisiblePermissionChange=function(e){i.visiblePermissions=e}}return e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.buildForm=function(){this.form=this.fb.group({name:new l.FormControl({value:this.selected.name||"",disabled:this.selected.isStatic},[l.Validators.required,l.Validators.maxLength(256)]),isDefault:[this.selected.isDefault||!1],isPublic:[this.selected.isPublic||!1]})},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new I(e)).pipe(d.pluck("IdentityState","selectedRole")).subscribe((function(e){t.selected=e,t.openModal()}))},e.prototype.save=function(){var e=this;this.form.valid&&(this.modalBusy=!0,this.store.dispatch(this.selected.id?new R(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id})):new N(this.form.value)).pipe(d.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.list.get()})))},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentity::RoleDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===r.Confirmation.Status.confirm&&n.store.dispatch(new S(e)).subscribe((function(){return n.list.get()}))}))},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new v(t))})).subscribe()},e.prototype.onClickSaveButton=function(){this.formRef.nativeElement.dispatchEvent(new Event("submit",{bubbles:!0,cancelable:!0}))},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e.prototype.sort=function(e){var t=e.sorts[0],n=t.prop,r=t.dir;this.list.sortKey=n,this.list.sortOrder=r},e}();j.decorators=[{type:i.Component,args:[{selector:"abp-roles",template:'<div id="identity-roles-wrapper" class="card">\r\n  <div class="card-header">\r\n    <div class="row">\r\n      <div class="col col-md-6">\r\n        <h5 class="card-title">{{ \'AbpIdentity::Roles\' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class="text-right col col-md-6">\r\n        <button\r\n          *abpPermission="\'AbpIdentity.Roles.Create\'"\r\n          id="create-role"\r\n          class="btn btn-primary"\r\n          type="button"\r\n          (click)="add()"\r\n        >\r\n          <i class="fa fa-plus mr-1"></i>\r\n          <span>{{ \'AbpIdentity::NewRole\' | abpLocalization }}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class="card-body">\r\n    <ngx-datatable [rows]="data$ | async" [count]="totalCount$ | async" [list]="list" default>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpIdentity::Actions\' | abpLocalization"\r\n        [maxWidth]="150"\r\n        [sortable]="false"\r\n      >\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          <div ngbDropdown container="body" class="d-inline-block">\r\n            <button\r\n              class="btn btn-primary btn-sm dropdown-toggle"\r\n              data-toggle="dropdown"\r\n              aria-haspopup="true"\r\n              ngbDropdownToggle\r\n            >\r\n              <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\r\n            </button>\r\n            <div ngbDropdownMenu>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Roles.Update\'"\r\n                ngbDropdownItem\r\n                (click)="edit(row.id)"\r\n              >\r\n                {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Roles.ManagePermissions\'"\r\n                ngbDropdownItem\r\n                (click)="openPermissionsModal(row.name)"\r\n              >\r\n                {{ \'AbpIdentity::Permissions\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *ngIf="!row.isStatic"\r\n                [abpPermission]="\'AbpIdentity.Roles.Delete\'"\r\n                ngbDropdownItem\r\n                (click)="delete(row.id, row.name)"\r\n              >\r\n                {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column [name]="\'AbpIdentity::RoleName\' | abpLocalization" prop="name">\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          {{ row.name }}\r\n          <span *ngIf="row.isDefault" class="badge badge-pill badge-success ml-1">{{\r\n            \'AbpIdentity::DisplayName:IsDefault\' | abpLocalization\r\n          }}</span>\r\n          <span *ngIf="row.isPublic" class="badge badge-pill badge-info ml-1">{{\r\n            \'AbpIdentity::DisplayName:IsPublic\' | abpLocalization\r\n          }}</span>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal size="md" [(visible)]="isModalVisible" [busy]="modalBusy">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewRole\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <form #formRef [formGroup]="form" (ngSubmit)="save()" validateOnSubmit>\r\n      <div class="form-group">\r\n        <label for="role-name">{{ \'AbpIdentity::RoleName\' | abpLocalization }}</label\r\n        ><span> * </span>\r\n        <input autofocus type="text" id="role-name" class="form-control" formControlName="name" />\r\n      </div>\r\n\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="role-is-default"\r\n          class="custom-control-input"\r\n          formControlName="isDefault"\r\n        />\r\n        <label class="custom-control-label" for="role-is-default">{{\r\n          \'AbpIdentity::DisplayName:IsDefault\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n\r\n      <div class="custom-checkbox custom-control mb-2">\r\n        <input\r\n          type="checkbox"\r\n          id="role-is-public"\r\n          class="custom-control-input"\r\n          formControlName="isPublic"\r\n        />\r\n        <label class="custom-control-label" for="role-is-public">{{\r\n          \'AbpIdentity::DisplayName:IsPublic\' | abpLocalization\r\n        }}</label>\r\n      </div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" [disabled]="form?.invalid" (click)="onClickSaveButton()">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement="abpPermissionManagement"\r\n  *abpReplaceableTemplate="\r\n    {\r\n      inputs: {\r\n        providerName: { value: \'R\' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true },\r\n        hideBadges: { value: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  "\r\n  (abpInit)="init(abpPermissionManagement)"\r\n>\r\n</abp-permission-management>\r\n',providers:[t.ListService]}]}],j.ctorParameters=function(){return[{type:t.ListService},{type:r.ConfirmationService},{type:l.FormBuilder},{type:s.Store}]},j.propDecorators={formRef:[{type:i.ViewChild,args:["formRef",{static:!1,read:i.ElementRef}]}]},b([s.Select(e.IdentityState.getRoles),f("design:type",p.Observable)],j.prototype,"data$",void 0),b([s.Select(e.IdentityState.getRolesTotalCount),f("design:type",p.Observable)],j.prototype,"totalCount$",void 0);var T=function(){function e(e){this.rest=e,this.apiName="AbpIdentity"}return e.prototype.getRoles=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/identity/roles",params:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getAllRoles=function(){return this.rest.request({method:"GET",url:"/api/identity/roles/all"},{apiName:this.apiName})},e.prototype.getRoleById=function(e){var t={method:"GET",url:"/api/identity/roles/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.deleteRole=function(e){var t={method:"DELETE",url:"/api/identity/roles/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.createRole=function(e){var t={method:"POST",url:"/api/identity/roles",body:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.updateRole=function(e){var t="/api/identity/roles/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n,{apiName:this.apiName})},e.prototype.getUsers=function(e){void 0===e&&(e={});var t={method:"GET",url:"/api/identity/users",params:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getUserById=function(e){var t={method:"GET",url:"/api/identity/users/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getUserRoles=function(e){var t={method:"GET",url:"/api/identity/users/"+e+"/roles"};return this.rest.request(t,{apiName:this.apiName})},e.prototype.getUserAssingableRoles=function(){return this.rest.request({method:"GET",url:"/api/identity/users/assignable-roles"},{apiName:this.apiName})},e.prototype.deleteUser=function(e){var t={method:"DELETE",url:"/api/identity/users/"+e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.createUser=function(e){var t={method:"POST",url:"/api/identity/users",body:e};return this.rest.request(t,{apiName:this.apiName})},e.prototype.updateUser=function(e){var t="/api/identity/users/"+e.id;delete e.id;var n={method:"PUT",url:t,body:e};return this.rest.request(n,{apiName:this.apiName})},e}();T.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new T(i.ɵɵinject(t.RestService))},token:T,providedIn:"root"}),T.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],T.ctorParameters=function(){return[{type:t.RestService}]};var q=function(){function e(e,t,n,r,i,o){var a=this;this.list=e,this.confirmationService=t,this.fb=n,this.store=r,this.identityService=i,this.identityUserService=o,this.visiblePermissions=!1,this.modalBusy=!1,this.permissionManagementKey="PermissionManagement.PermissionManagementComponent",this.trackByFn=function(e,t){return Object.keys(t)[0]||e},this.onVisiblePermissionChange=function(e){a.visiblePermissions=e}}return Object.defineProperty(e.prototype,"roleGroups",{get:function(){var e=this;return y.default((function(){return e.form.get("roleNames").controls}),[])},enumerable:!1,configurable:!0}),e.prototype.ngOnInit=function(){this.hookToQuery()},e.prototype.buildForm=function(){var e=this;this.identityUserService.getAssignableRoles().subscribe((function(t){var n=t.items;e.roles=n,e.form=e.fb.group({userName:[e.selected.userName||"",[l.Validators.required,l.Validators.maxLength(256)]],email:[e.selected.email||"",[l.Validators.required,l.Validators.email,l.Validators.maxLength(256)]],name:[e.selected.name||"",[l.Validators.maxLength(64)]],surname:[e.selected.surname||"",[l.Validators.maxLength(64)]],phoneNumber:[e.selected.phoneNumber||"",[l.Validators.maxLength(16)]],lockoutEnabled:[!e.selected.id||e.selected.lockoutEnabled],roleNames:e.fb.array(e.roles.map((function(t){var n;return e.fb.group(((n={})[t.name]=[e.selected.id?!!y.default((function(){return e.selectedUserRoles.find((function(e){return e.id===t.id}))})):t.isDefault],n))})))});var i=r.getPasswordValidators(e.store);e.form.addControl("password",new l.FormControl("",g(i))),e.selected.userName||(e.form.get("password").setValidators(g(i,[l.Validators.required])),e.form.get("password").updateValueAndValidity())}))},e.prototype.openModal=function(){this.buildForm(),this.isModalVisible=!0},e.prototype.add=function(){this.selected={},this.selectedUserRoles=[],this.openModal()},e.prototype.edit=function(e){var t=this;this.store.dispatch(new C(e)).pipe(d.switchMap((function(){return t.store.dispatch(new x(e))})),d.pluck("IdentityState"),d.take(1)).subscribe((function(e){t.selected=e.selectedUser,t.selectedUserRoles=e.selectedUserRoles||[],t.openModal()}))},e.prototype.save=function(){var e=this;if(this.form.valid&&!this.modalBusy){this.modalBusy=!0;var t=this.form.value.roleNames,n=y.default((function(){return t.filter((function(e){return!!e[Object.keys(e)[0]]})).map((function(e){return Object.keys(e)[0]}))}),[]);this.store.dispatch(this.selected.id?new P(Object.assign(Object.assign(Object.assign({},this.selected),this.form.value),{id:this.selected.id,roleNames:n})):new A(Object.assign(Object.assign({},this.form.value),{roleNames:n}))).pipe(d.finalize((function(){return e.modalBusy=!1}))).subscribe((function(){e.isModalVisible=!1,e.list.get()}))}},e.prototype.delete=function(e,t){var n=this;this.confirmationService.warn("AbpIdentity::UserDeletionConfirmationMessage","AbpIdentity::AreYouSure",{messageLocalizationParams:[t]}).subscribe((function(t){t===r.Confirmation.Status.confirm&&n.store.dispatch(new U(e)).subscribe((function(){return n.list.get()}))}))},e.prototype.sort=function(e){var t=e.sorts[0],n=t.prop,r=t.dir;this.list.sortKey=n,this.list.sortOrder=r},e.prototype.hookToQuery=function(){var e=this;this.list.hookToQuery((function(t){return e.store.dispatch(new w(t))})).subscribe()},e.prototype.openPermissionsModal=function(e){var t=this;this.providerKey=e,setTimeout((function(){t.visiblePermissions=!0}),0)},e}();q.decorators=[{type:i.Component,args:[{selector:"abp-users",template:'<div id="identity-roles-wrapper" class="card">\r\n  <div class="card-header">\r\n    <div class="row">\r\n      <div class="col col-md-6">\r\n        <h5 class="card-title">{{ \'AbpIdentity::Users\' | abpLocalization }}</h5>\r\n      </div>\r\n      <div class="text-right col col-md-6">\r\n        <button\r\n          *abpPermission="\'AbpIdentity.Users.Create\'"\r\n          id="create-role"\r\n          class="btn btn-primary"\r\n          type="button"\r\n          (click)="add()"\r\n        >\r\n          <i class="fa fa-plus mr-1"></i>\r\n          <span>{{ \'AbpIdentity::NewUser\' | abpLocalization }}</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class="card-body">\r\n    <div id="data-tables-table-filter" class="data-tables-filter">\r\n      <div class="input-group">\r\n        <input\r\n          type="search"\r\n          class="form-control"\r\n          [placeholder]="\'AbpUi::PagerSearch\' | abpLocalization"\r\n          [(ngModel)]="list.filter"\r\n        />\r\n      </div>\r\n    </div>\r\n\r\n    <ngx-datatable [rows]="data$ | async" [count]="totalCount$ | async" [list]="list" default>\r\n      <ngx-datatable-column\r\n        [name]="\'AbpIdentity::Actions\' | abpLocalization"\r\n        [maxWidth]="150"\r\n        [sortable]="false"\r\n      >\r\n        <ng-template let-row="row" ngx-datatable-cell-template>\r\n          <div ngbDropdown container="body" class="d-inline-block">\r\n            <button\r\n              class="btn btn-primary btn-sm dropdown-toggle"\r\n              data-toggle="dropdown"\r\n              aria-haspopup="true"\r\n              ngbDropdownToggle\r\n            >\r\n              <i class="fa fa-cog mr-1"></i>{{ \'AbpIdentity::Actions\' | abpLocalization }}\r\n            </button>\r\n            <div ngbDropdownMenu>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Users.Update\'"\r\n                ngbDropdownItem\r\n                (click)="edit(row.id)"\r\n              >\r\n                {{ \'AbpIdentity::Edit\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Users.ManagePermissions\'"\r\n                ngbDropdownItem\r\n                (click)="openPermissionsModal(row.id)"\r\n              >\r\n                {{ \'AbpIdentity::Permissions\' | abpLocalization }}\r\n              </button>\r\n              <button\r\n                *abpPermission="\'AbpIdentity.Users.Delete\'"\r\n                ngbDropdownItem\r\n                (click)="delete(row.id, row.userName)"\r\n              >\r\n                {{ \'AbpIdentity::Delete\' | abpLocalization }}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [width]="200"\r\n        [name]="\'AbpIdentity::UserName\' | abpLocalization"\r\n        prop="userName"\r\n      ></ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [width]="200"\r\n        [name]="\'AbpIdentity::EmailAddress\' | abpLocalization"\r\n        prop="email"\r\n      ></ngx-datatable-column>\r\n      <ngx-datatable-column\r\n        [width]="200"\r\n        [name]="\'AbpIdentity::PhoneNumber\' | abpLocalization"\r\n        prop="phoneNumber"\r\n      ></ngx-datatable-column>\r\n    </ngx-datatable>\r\n  </div>\r\n</div>\r\n\r\n<abp-modal [(visible)]="isModalVisible" [busy]="modalBusy" (disappear)="form = null">\r\n  <ng-template #abpHeader>\r\n    <h3>{{ (selected?.id ? \'AbpIdentity::Edit\' : \'AbpIdentity::NewUser\') | abpLocalization }}</h3>\r\n  </ng-template>\r\n\r\n  <ng-template #abpBody>\r\n    <ng-template #loaderRef\r\n      ><div class="text-center"><i class="fa fa-pulse fa-spinner"></i></div\r\n    ></ng-template>\r\n\r\n    <form *ngIf="form; else loaderRef" [formGroup]="form" (ngSubmit)="save()">\r\n      <ul ngbNav #nav="ngbNav" class="nav-tabs">\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::UserInformations\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div class="form-group">\r\n              <label for="user-name">{{ \'AbpIdentity::UserName\' | abpLocalization }}</label\r\n              ><span> * </span>\r\n              <input\r\n                type="text"\r\n                id="user-name"\r\n                class="form-control"\r\n                formControlName="userName"\r\n                autofocus\r\n              />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="name">{{ \'AbpIdentity::DisplayName:Name\' | abpLocalization }}</label>\r\n              <input type="text" id="name" class="form-control" formControlName="name" />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="surname">{{\r\n                \'AbpIdentity::DisplayName:Surname\' | abpLocalization\r\n              }}</label>\r\n              <input type="text" id="surname" class="form-control" formControlName="surname" />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="password">{{ \'AbpIdentity::Password\' | abpLocalization }}</label\r\n              ><span *ngIf="!selected.userName"> * </span>\r\n              <input\r\n                type="password"\r\n                id="password"\r\n                autocomplete="new-password"\r\n                class="form-control"\r\n                formControlName="password"\r\n              />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="email">{{ \'AbpIdentity::EmailAddress\' | abpLocalization }}</label\r\n              ><span> * </span>\r\n              <input type="text" id="email" class="form-control" formControlName="email" />\r\n            </div>\r\n\r\n            <div class="form-group">\r\n              <label for="phone-number">{{ \'AbpIdentity::PhoneNumber\' | abpLocalization }}</label>\r\n              <input\r\n                type="text"\r\n                id="phone-number"\r\n                class="form-control"\r\n                formControlName="phoneNumber"\r\n              />\r\n            </div>\r\n\r\n            <div class="custom-checkbox custom-control mb-2">\r\n              <input\r\n                type="checkbox"\r\n                id="lockout-checkbox"\r\n                class="custom-control-input"\r\n                formControlName="lockoutEnabled"\r\n              />\r\n              <label class="custom-control-label" for="lockout-checkbox">{{\r\n                \'AbpIdentity::DisplayName:LockoutEnabled\' | abpLocalization\r\n              }}</label>\r\n            </div>\r\n          </ng-template>\r\n        </li>\r\n\r\n        <li ngbNavItem>\r\n          <a ngbNavLink>{{ \'AbpIdentity::Roles\' | abpLocalization }}</a>\r\n          <ng-template ngbNavContent>\r\n            <div\r\n              *ngFor="let roleGroup of roleGroups; let i = index; trackBy: trackByFn"\r\n              class="custom-checkbox custom-control mb-2"\r\n            >\r\n              <input\r\n                type="checkbox"\r\n                class="custom-control-input"\r\n                [attr.id]="\'roles-\' + i"\r\n                [formControl]="roleGroup.controls[roles[i].name]"\r\n              />\r\n              <label class="custom-control-label" [attr.for]="\'roles-\' + i">{{\r\n                roles[i].name\r\n              }}</label>\r\n            </div>\r\n          </ng-template>\r\n        </li>\r\n      </ul>\r\n\r\n      <div class="mt-2 fade-in-top" [ngbNavOutlet]="nav"></div>\r\n    </form>\r\n  </ng-template>\r\n\r\n  <ng-template #abpFooter>\r\n    <button type="button" class="btn btn-secondary" #abpClose>\r\n      {{ \'AbpIdentity::Cancel\' | abpLocalization }}\r\n    </button>\r\n    <abp-button iconClass="fa fa-check" (click)="save()" [disabled]="form?.invalid">{{\r\n      \'AbpIdentity::Save\' | abpLocalization\r\n    }}</abp-button>\r\n  </ng-template>\r\n</abp-modal>\r\n\r\n<abp-permission-management\r\n  #abpPermissionManagement="abpPermissionManagement"\r\n  *abpReplaceableTemplate="\r\n    {\r\n      inputs: {\r\n        providerName: { value: \'U\' },\r\n        providerKey: { value: providerKey },\r\n        visible: { value: visiblePermissions, twoWay: true }\r\n      },\r\n      outputs: { visibleChange: onVisiblePermissionChange },\r\n      componentKey: permissionManagementKey\r\n    };\r\n    let init = initTemplate\r\n  "\r\n  (abpInit)="init(abpPermissionManagement)"\r\n>\r\n</abp-permission-management>\r\n',providers:[t.ListService]}]}],q.ctorParameters=function(){return[{type:t.ListService},{type:r.ConfirmationService},{type:l.FormBuilder},{type:s.Store},{type:T},{type:L}]},q.propDecorators={modalContent:[{type:i.ViewChild,args:["modalContent",{static:!1}]}]},b([s.Select(e.IdentityState.getUsers),f("design:type",p.Observable)],q.prototype,"data$",void 0),b([s.Select(e.IdentityState.getUsersTotalCount),f("design:type",p.Observable)],q.prototype,"totalCount$",void 0);var M={requiredPolicy:"AbpIdentity.Roles",replaceableComponent:{key:"Identity.RolesComponent",defaultComponent:j}},O={requiredPolicy:"AbpIdentity.Users",replaceableComponent:{key:"Identity.UsersComponent",defaultComponent:q}},E=[{path:"",redirectTo:"roles",pathMatch:"full"},{path:"",component:t.DynamicLayoutComponent,canActivate:[t.AuthGuard,t.PermissionGuard],children:[{path:"roles",component:t.ReplaceableRouteContainerComponent,data:M},{path:"users",component:t.ReplaceableRouteContainerComponent,data:O}]}],D=function(){};D.decorators=[{type:i.NgModule,args:[{imports:[c.RouterModule.forChild(E)],exports:[c.RouterModule]}]}];var z=function(){function e(){}return e.forChild=function(){return{ngModule:e,providers:[]}},e.forLazy=function(){return new t.LazyModuleFactory(e.forChild())},e}();z.decorators=[{type:i.NgModule,args:[{declarations:[j,q],exports:[j,q],imports:[s.NgxsModule.forFeature([e.IdentityState]),t.CoreModule,D,o.NgbNavModule,r.ThemeSharedModule,o.NgbDropdownModule,n.PermissionManagementModule,a.NgxValidateCoreModule]}]}];var G=function(){function t(e){this.store=e}return t.prototype.getRoles=function(){return this.store.selectSnapshot(e.IdentityState.getRoles)},t.prototype.getRolesTotalCount=function(){return this.store.selectSnapshot(e.IdentityState.getRolesTotalCount)},t.prototype.getUsers=function(){return this.store.selectSnapshot(e.IdentityState.getUsers)},t.prototype.getUsersTotalCount=function(){return this.store.selectSnapshot(e.IdentityState.getUsersTotalCount)},t.prototype.dispatchGetRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(v.bind.apply(v,g([void 0],e))))},t.prototype.dispatchGetRoleById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(I.bind.apply(I,g([void 0],e))))},t.prototype.dispatchDeleteRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(S.bind.apply(S,g([void 0],e))))},t.prototype.dispatchCreateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(N.bind.apply(N,g([void 0],e))))},t.prototype.dispatchUpdateRole=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(R.bind.apply(R,g([void 0],e))))},t.prototype.dispatchGetUsers=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(w.bind.apply(w,g([void 0],e))))},t.prototype.dispatchGetUserById=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(C.bind.apply(C,g([void 0],e))))},t.prototype.dispatchDeleteUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(U.bind.apply(U,g([void 0],e))))},t.prototype.dispatchCreateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(A.bind.apply(A,g([void 0],e))))},t.prototype.dispatchUpdateUser=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(P.bind.apply(P,g([void 0],e))))},t.prototype.dispatchGetUserRoles=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return this.store.dispatch(new(x.bind.apply(x,g([void 0],e))))},t}();G.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new G(i.ɵɵinject(s.Store))},token:G,providedIn:"root"}),G.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],G.ctorParameters=function(){return[{type:s.Store}]};var B=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.findById=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/"+e},{apiName:t.apiName})},this.findByUserName=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/by-username/"+e},{apiName:t.apiName})},this.getCount=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/count",params:{filter:e.filter}},{apiName:t.apiName})},this.search=function(e){return t.restService.request({method:"GET",url:"/api/identity/users/lookup/search",params:{filter:e.filter,sorting:e.sorting,skipCount:e.skipCount,maxResultCount:e.maxResultCount}},{apiName:t.apiName})}};B.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new B(i.ɵɵinject(t.RestService))},token:B,providedIn:"root"}),B.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],B.ctorParameters=function(){return[{type:t.RestService}]};var F=function(e){var t=this;this.restService=e,this.apiName="AbpIdentity",this.changePassword=function(e){return t.restService.request({method:"POST",url:"/api/identity/my-profile/change-password",body:e},{apiName:t.apiName})},this.get=function(){return t.restService.request({method:"GET",url:"/api/identity/my-profile"},{apiName:t.apiName})},this.update=function(e){return t.restService.request({method:"PUT",url:"/api/identity/my-profile",body:e},{apiName:t.apiName})}};F.ɵprov=i.ɵɵdefineInjectable({factory:function(){return new F(i.ɵɵinject(t.RestService))},token:F,providedIn:"root"}),F.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],F.ctorParameters=function(){return[{type:t.RestService}]},e.CreateRole=N,e.CreateUser=A,e.DeleteRole=S,e.DeleteUser=U,e.GetRoleById=I,e.GetRoles=v,e.GetUserById=C,e.GetUserRoles=x,e.GetUsers=w,e.IdentityModule=z,e.IdentityRoleService=k,e.IdentityService=T,e.IdentityStateService=G,e.IdentityUserLookupService=B,e.IdentityUserService=L,e.ProfileService=F,e.RolesComponent=j,e.UpdateRole=R,e.UpdateUser=P,e.UsersComponent=q,e.ɵa=j,e.ɵb=L,e.ɵc=k,e.ɵg=q,e.ɵh=T,e.ɵi=D,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=abp-ng.identity.umd.min.js.map