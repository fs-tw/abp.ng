import { ListService, PagedResultDto } from '@abp/ng.core';
import { eFeatureManagementComponents } from '@abp/ng.feature-management';
import { ConfirmationService } from '@abp/ng.theme.shared';
import { OnInit, TemplateRef } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Store } from '@ngxs/store';
import { Observable } from 'rxjs';
import { GetTenantsInput, TenantDto } from '../../proxy/models';
import { TenantManagementService } from '../../services/tenant-management.service';
interface SelectedModalContent {
    type: 'saveConnStr' | 'saveTenant';
    title: string;
    template: TemplateRef<any>;
}
export declare class TenantsComponent implements OnInit {
    readonly list: ListService<GetTenantsInput>;
    private confirmationService;
    private tenantService;
    private fb;
    private store;
    data$: Observable<PagedResultDto<TenantDto>>;
    totalCount$: Observable<number>;
    selected: TenantDto;
    tenantForm: FormGroup;
    defaultConnectionStringForm: FormGroup;
    defaultConnectionString: string;
    isModalVisible: boolean;
    selectedModalContent: SelectedModalContent;
    visibleFeatures: boolean;
    providerKey: string;
    _useSharedDatabase: boolean;
    modalBusy: boolean;
    featureManagementKey: eFeatureManagementComponents;
    get hasSelectedTenant(): boolean;
    get useSharedDatabase(): boolean;
    get connectionString(): string;
    tenantModalTemplate: TemplateRef<any>;
    connectionStringModalTemplate: TemplateRef<any>;
    get isDisabledSaveButton(): boolean;
    onVisibleFeaturesChange: (value: boolean) => void;
    constructor(list: ListService<GetTenantsInput>, confirmationService: ConfirmationService, tenantService: TenantManagementService, fb: FormBuilder, store: Store);
    ngOnInit(): void;
    private createTenantForm;
    private createDefaultConnectionStringForm;
    openModal(title: string, template: TemplateRef<any>, type: 'saveConnStr' | 'saveTenant'): void;
    onEditConnectionString(id: string): void;
    addTenant(): void;
    editTenant(id: string): void;
    save(): void;
    saveConnectionString(): void;
    saveTenant(): void;
    delete(id: string, name: string): void;
    hookToQuery(): void;
    onSharedDatabaseChange(value: boolean): void;
    openFeaturesModal(providerKey: string): void;
    sort(data: any): void;
}
export {};
